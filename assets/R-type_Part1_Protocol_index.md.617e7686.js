import{_ as s,c as n,o as e,a}from"./app.5c53a8f7.js";const h=JSON.parse('{"title":"Protocole R\xE9seau \u2014 R-Type Multiplayer Engine","description":"","frontmatter":{},"headers":[{"level":2,"title":"1. Objectif","slug":"_1-objectif","link":"#_1-objectif","children":[]},{"level":2,"title":"2. Architecture g\xE9n\xE9rale","slug":"_2-architecture-generale","link":"#_2-architecture-generale","children":[{"level":3,"title":"Communication Hybride","slug":"communication-hybride","link":"#communication-hybride","children":[]},{"level":3,"title":"Sch\xE9ma simplifi\xE9","slug":"schema-simplifie","link":"#schema-simplifie","children":[]}]},{"level":2,"title":"3. Phases de communication","slug":"_3-phases-de-communication","link":"#_3-phases-de-communication","children":[{"level":3,"title":"\xC9tape 1 \u2014 Connexion TCP et authentification","slug":"etape-1-\u2014-connexion-tcp-et-authentification","link":"#etape-1-\u2014-connexion-tcp-et-authentification","children":[]},{"level":3,"title":"\xC9tape 2 \u2014 Attribution d\u2019une Room","slug":"etape-2-\u2014-attribution-d-une-room","link":"#etape-2-\u2014-attribution-d-une-room","children":[]},{"level":3,"title":"\xC9tape 3 \u2014 Phase de jeu temps r\xE9el (UDP)","slug":"etape-3-\u2014-phase-de-jeu-temps-reel-udp","link":"#etape-3-\u2014-phase-de-jeu-temps-reel-udp","children":[]},{"level":3,"title":"\xC9tape 4 \u2014 Fin de partie / d\xE9connexion","slug":"etape-4-\u2014-fin-de-partie-deconnexion","link":"#etape-4-\u2014-fin-de-partie-deconnexion","children":[]}]},{"level":2,"title":"4.  Format des paquets","slug":"_4-format-des-paquets","link":"#_4-format-des-paquets","children":[{"level":3,"title":"En-t\xEAte standard des paquets binaires","slug":"en-tete-standard-des-paquets-binaires","link":"#en-tete-standard-des-paquets-binaires","children":[]},{"level":3,"title":"Exemple de s\xE9rialisation","slug":"exemple-de-serialisation","link":"#exemple-de-serialisation","children":[]},{"level":3,"title":"Exemple de d\xE9s\xE9rialisation","slug":"exemple-de-deserialisation","link":"#exemple-de-deserialisation","children":[]}]},{"level":2,"title":"5. Gestion centralis\xE9e des paquets","slug":"_5-gestion-centralisee-des-paquets","link":"#_5-gestion-centralisee-des-paquets","children":[{"level":3,"title":"Exemple","slug":"exemple","link":"#exemple","children":[]}]},{"level":2,"title":"6. Communication asynchrone (Boost.Asio)","slug":"_6-communication-asynchrone-boost-asio","link":"#_6-communication-asynchrone-boost-asio","children":[{"level":3,"title":"Exemple c\xF4t\xE9 serveur","slug":"exemple-cote-serveur","link":"#exemple-cote-serveur","children":[]},{"level":3,"title":"Exemple c\xF4t\xE9 client","slug":"exemple-cote-client","link":"#exemple-cote-client","children":[]}]},{"level":2,"title":"7. Int\xE9grit\xE9 et s\xE9curit\xE9","slug":"_7-integrite-et-securite","link":"#_7-integrite-et-securite","children":[]},{"level":2,"title":"8.  S\xE9quence de communication typique","slug":"_8-sequence-de-communication-typique","link":"#_8-sequence-de-communication-typique","children":[]},{"level":2,"title":"9.  Typologie des paquets","slug":"_9-typologie-des-paquets","link":"#_9-typologie-des-paquets","children":[]},{"level":2,"title":"10.  Gestion des Rooms","slug":"_10-gestion-des-rooms","link":"#_10-gestion-des-rooms","children":[{"level":3,"title":"Avantages :","slug":"avantages","link":"#avantages","children":[]}]},{"level":2,"title":"11.  R\xE9sum\xE9","slug":"_11-resume","link":"#_11-resume","children":[]},{"level":2,"title":"12.  Points cl\xE9s du design","slug":"_12-points-cles-du-design","link":"#_12-points-cles-du-design","children":[]}],"relativePath":"R-type_Part1/Protocol/index.md"}'),l={name:"R-type_Part1/Protocol/index.md"},t=a(`<h1 id="protocole-reseau-\u2014-r-type-multiplayer-engine" tabindex="-1"><strong>Protocole R\xE9seau \u2014 R-Type Multiplayer Engine</strong> <a class="header-anchor" href="#protocole-reseau-\u2014-r-type-multiplayer-engine" aria-hidden="true">#</a></h1><h2 id="_1-objectif" tabindex="-1">1. Objectif <a class="header-anchor" href="#_1-objectif" aria-hidden="true">#</a></h2><p>Le protocole r\xE9seau du projet <strong>R-Type</strong> vise \xE0 permettre la <strong>communication fiable et rapide</strong> entre les clients (joueurs) et le serveur central du jeu, en combinant deux modes de transport :</p><ul><li><strong>TCP</strong> pour les \xE9changes critiques (connexion, login, gestion des rooms),</li><li><strong>UDP</strong> pour les \xE9changes temps r\xE9el (positions, tirs, collisions).</li></ul><p>Cette approche garantit \xE0 la fois la <strong>fiabilit\xE9 des \xE9changes de contr\xF4le</strong> et la <strong>performance du gameplay</strong>.</p><hr><h2 id="_2-architecture-generale" tabindex="-1">2. Architecture g\xE9n\xE9rale <a class="header-anchor" href="#_2-architecture-generale" aria-hidden="true">#</a></h2><h3 id="communication-hybride" tabindex="-1">Communication Hybride <a class="header-anchor" href="#communication-hybride" aria-hidden="true">#</a></h3><table><thead><tr><th>Couche</th><th>Protocole</th><th>R\xF4le</th></tr></thead><tbody><tr><td><strong>Contr\xF4le</strong></td><td>TCP</td><td>Connexion, authentification, cr\xE9ation et gestion des rooms.</td></tr><tr><td><strong>Gameplay</strong></td><td>UDP</td><td>Envoi d&#39;entr\xE9es et synchronisation d\u2019\xE9tat du jeu en temps r\xE9el.</td></tr></tbody></table><h3 id="schema-simplifie" tabindex="-1">Sch\xE9ma simplifi\xE9 <a class="header-anchor" href="#schema-simplifie" aria-hidden="true">#</a></h3><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki vp-code-dark"><code><span class="line"><span style="color:#c9d1d9;">   TCP (Gestion / Connexion)</span></span>
<span class="line"><span style="color:#c9d1d9;">\u250C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510                                \u250C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510</span></span>
<span class="line"><span style="color:#c9d1d9;">\u2502   Client   \u2502 &lt;\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500&gt; \u2502   Serveur  \u2502</span></span>
<span class="line"><span style="color:#c9d1d9;">\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518                                \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518</span></span>
<span class="line"><span style="color:#c9d1d9;">        \u2191                                           \u2191</span></span>
<span class="line"><span style="color:#c9d1d9;">        |                UDP (Gameplay)              |</span></span>
<span class="line"><span style="color:#c9d1d9;">        \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2192 (Entr\xE9es / \xC9tats) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518</span></span>
<span class="line"><span style="color:#c9d1d9;"></span></span></code></pre><pre class="shiki vp-code-light"><code><span class="line"><span style="color:#24292f;">   TCP (Gestion / Connexion)</span></span>
<span class="line"><span style="color:#24292f;">\u250C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510                                \u250C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510</span></span>
<span class="line"><span style="color:#24292f;">\u2502   Client   \u2502 &lt;\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500&gt; \u2502   Serveur  \u2502</span></span>
<span class="line"><span style="color:#24292f;">\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518                                \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518</span></span>
<span class="line"><span style="color:#24292f;">        \u2191                                           \u2191</span></span>
<span class="line"><span style="color:#24292f;">        |                UDP (Gameplay)              |</span></span>
<span class="line"><span style="color:#24292f;">        \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2192 (Entr\xE9es / \xC9tats) \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518</span></span>
<span class="line"><span style="color:#24292f;"></span></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><hr><h2 id="_3-phases-de-communication" tabindex="-1">3. Phases de communication <a class="header-anchor" href="#_3-phases-de-communication" aria-hidden="true">#</a></h2><h3 id="etape-1-\u2014-connexion-tcp-et-authentification" tabindex="-1">\xC9tape 1 \u2014 Connexion TCP et authentification <a class="header-anchor" href="#etape-1-\u2014-connexion-tcp-et-authentification" aria-hidden="true">#</a></h3><ol><li><p>Le client \xE9tablit une connexion TCP avec le serveur (<code>ServerHub</code>).</p></li><li><p>Le client envoie un <strong>LoginPacket</strong> contenant :</p><ul><li>le nom du joueur,</li><li>un identifiant de session ou de version.</li></ul></li><li><p>Le serveur valide le login et peut retourner un <strong>RoomPacket</strong> pour informer le client qu\u2019une room est pr\xEAte \xE0 rejoindre.</p></li></ol><p><strong>Transport utilis\xE9 : TCP</strong><strong>Paquet concern\xE9 : <code>LoginPacket</code></strong></p><hr><h3 id="etape-2-\u2014-attribution-d-une-room" tabindex="-1">\xC9tape 2 \u2014 Attribution d\u2019une Room <a class="header-anchor" href="#etape-2-\u2014-attribution-d-une-room" aria-hidden="true">#</a></h3><p>Lorsqu\u2019un joueur rejoint ou cr\xE9e une room :</p><ol><li><p>Le serveur attribue dynamiquement un <strong>port UDP</strong> pour cette room.</p></li><li><p>Il envoie au client un <strong>RoomPacket</strong> contenant ce port :</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki vp-code-dark"><code><span class="line"><span style="color:#FF7B72;">class</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">RoomPacket</span><span style="color:#C9D1D9;"> : </span><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">IPacket</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">public:</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#FF7B72;">uint16_t</span><span style="color:#C9D1D9;"> port;</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#FFA657;">PacketType</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">getType</span><span style="color:#C9D1D9;">() </span><span style="color:#FF7B72;">const</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">override</span><span style="color:#C9D1D9;"> { </span><span style="color:#FF7B72;">return</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">PacketType</span><span style="color:#C9D1D9;">::ROOMCONNECTION; }</span></span>
<span class="line"><span style="color:#C9D1D9;">};</span></span>
<span class="line"></span></code></pre><pre class="shiki vp-code-light"><code><span class="line"><span style="color:#CF222E;">class</span><span style="color:#24292F;"> </span><span style="color:#953800;">RoomPacket</span><span style="color:#24292F;"> : </span><span style="color:#CF222E;">public</span><span style="color:#24292F;"> </span><span style="color:#953800;">IPacket</span><span style="color:#24292F;"> {</span></span>
<span class="line"><span style="color:#24292F;">    </span><span style="color:#CF222E;">public:</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#CF222E;">uint16_t</span><span style="color:#24292F;"> port;</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#953800;">PacketType</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">getType</span><span style="color:#24292F;">() </span><span style="color:#CF222E;">const</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">override</span><span style="color:#24292F;"> { </span><span style="color:#CF222E;">return</span><span style="color:#24292F;"> </span><span style="color:#953800;">PacketType</span><span style="color:#24292F;">::ROOMCONNECTION; }</span></span>
<span class="line"><span style="color:#24292F;">};</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></li><li><p>Le client utilise ce port pour cr\xE9er un client UDP (<code>ClientRoom</code>) et passer en communication temps r\xE9el.</p></li></ol><p><strong>Transport utilis\xE9 : TCP</strong><strong>Paquet concern\xE9 : <code>RoomPacket</code></strong></p><hr><h3 id="etape-3-\u2014-phase-de-jeu-temps-reel-udp" tabindex="-1">\xC9tape 3 \u2014 Phase de jeu temps r\xE9el (UDP) <a class="header-anchor" href="#etape-3-\u2014-phase-de-jeu-temps-reel-udp" aria-hidden="true">#</a></h3><p>Une fois dans la room :</p><ul><li><p>Le <strong>client</strong> envoie p\xE9riodiquement des <strong>InputPacket</strong> :</p><ul><li>ces paquets contiennent les actions du joueur (ex : mouvement, tir).</li></ul><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki vp-code-dark"><code><span class="line"><span style="color:#FF7B72;">struct</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">InputPacket</span><span style="color:#C9D1D9;"> : IPacket {</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">uint8_t</span><span style="color:#C9D1D9;"> playerId;</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">uint8_t</span><span style="color:#C9D1D9;"> inputMask;</span><span style="color:#8B949E;"> // bits correspondant aux actions (haut, bas, gauche, tir, etc.)</span></span>
<span class="line"><span style="color:#C9D1D9;">};</span></span>
<span class="line"></span></code></pre><pre class="shiki vp-code-light"><code><span class="line"><span style="color:#CF222E;">struct</span><span style="color:#24292F;"> </span><span style="color:#953800;">InputPacket</span><span style="color:#24292F;"> : IPacket {</span></span>
<span class="line"><span style="color:#24292F;">    </span><span style="color:#CF222E;">uint8_t</span><span style="color:#24292F;"> playerId;</span></span>
<span class="line"><span style="color:#24292F;">    </span><span style="color:#CF222E;">uint8_t</span><span style="color:#24292F;"> inputMask;</span><span style="color:#6E7781;"> // bits correspondant aux actions (haut, bas, gauche, tir, etc.)</span></span>
<span class="line"><span style="color:#24292F;">};</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li><li><p>Le <strong>serveur</strong> envoie en retour des <strong>GameStatePacket</strong>, qui contiennent :</p><ul><li>les positions des entit\xE9s,</li><li>les \xE9tats des projectiles, ennemis, joueurs, etc.</li></ul><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki vp-code-dark"><code><span class="line"><span style="color:#FF7B72;">struct</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">GameStatePacket</span><span style="color:#C9D1D9;"> : IPacket {</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FFA657;">std</span><span style="color:#C9D1D9;">::vector</span><span style="color:#FF7B72;">&lt;</span><span style="color:#C9D1D9;">EntityState</span><span style="color:#FF7B72;">&gt;</span><span style="color:#C9D1D9;"> entities;</span><span style="color:#8B949E;"> // chaque entit\xE9 = id, position, \xE9tat</span></span>
<span class="line"><span style="color:#C9D1D9;">};</span></span>
<span class="line"></span></code></pre><pre class="shiki vp-code-light"><code><span class="line"><span style="color:#CF222E;">struct</span><span style="color:#24292F;"> </span><span style="color:#953800;">GameStatePacket</span><span style="color:#24292F;"> : IPacket {</span></span>
<span class="line"><span style="color:#24292F;">    </span><span style="color:#953800;">std</span><span style="color:#24292F;">::vector</span><span style="color:#CF222E;">&lt;</span><span style="color:#24292F;">EntityState</span><span style="color:#CF222E;">&gt;</span><span style="color:#24292F;"> entities;</span><span style="color:#6E7781;"> // chaque entit\xE9 = id, position, \xE9tat</span></span>
<span class="line"><span style="color:#24292F;">};</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li></ul><p>Le serveur diffuse r\xE9guli\xE8rement ces informations afin de maintenir tous les joueurs synchronis\xE9s, m\xEAme en cas de perte de paquets (UDP non fiable).</p><p><strong>Transport utilis\xE9 : UDP</strong><strong>Paquets concern\xE9s : <code>InputPacket</code>, <code>GameStatePacket</code></strong></p><hr><h3 id="etape-4-\u2014-fin-de-partie-deconnexion" tabindex="-1">\xC9tape 4 \u2014 Fin de partie / d\xE9connexion <a class="header-anchor" href="#etape-4-\u2014-fin-de-partie-deconnexion" aria-hidden="true">#</a></h3><p>Lorsqu\u2019un joueur quitte la room :</p><ol><li>Le client envoie un <strong>DisconnectPacket</strong>.</li><li>Le serveur retire le joueur de la room et notifie les autres joueurs.</li><li>Si la room est vide, elle est d\xE9truite.</li></ol><p><strong>Transport utilis\xE9 : TCP ou UDP (selon l\u2019\xE9tat de la partie)</strong><strong>Paquet concern\xE9 : <code>DisconnectPacket</code></strong></p><hr><h2 id="_4-format-des-paquets" tabindex="-1">4. Format des paquets <a class="header-anchor" href="#_4-format-des-paquets" aria-hidden="true">#</a></h2><p>Tous les paquets h\xE9ritent de l\u2019interface commune <code>IPacket</code> :</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki vp-code-dark"><code><span class="line"><span style="color:#FF7B72;">class</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">IPacket</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"><span style="color:#FF7B72;">public:</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">virtual</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">~IPacket</span><span style="color:#C9D1D9;">() </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">default</span><span style="color:#C9D1D9;">;</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">virtual</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">PacketType</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">getType</span><span style="color:#C9D1D9;">() </span><span style="color:#FF7B72;">const</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">0</span><span style="color:#C9D1D9;">;</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">virtual</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">std</span><span style="color:#C9D1D9;">::</span><span style="color:#FFA657;">vector</span><span style="color:#C9D1D9;">&lt;</span><span style="color:#FF7B72;">uint8_t</span><span style="color:#C9D1D9;">&gt; </span><span style="color:#D2A8FF;">serialize</span><span style="color:#C9D1D9;">() </span><span style="color:#FF7B72;">const</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">0</span><span style="color:#C9D1D9;">;</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">virtual</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">void</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">deserialize</span><span style="color:#C9D1D9;">(</span><span style="color:#FF7B72;">const</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">std</span><span style="color:#C9D1D9;">::</span><span style="color:#FFA657;">vector</span><span style="color:#C9D1D9;">&lt;</span><span style="color:#FF7B72;">uint8_t</span><span style="color:#C9D1D9;">&gt;</span><span style="color:#FF7B72;">&amp;</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">data</span><span style="color:#C9D1D9;">) </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">0</span><span style="color:#C9D1D9;">;</span></span>
<span class="line"><span style="color:#C9D1D9;">};</span></span>
<span class="line"></span></code></pre><pre class="shiki vp-code-light"><code><span class="line"><span style="color:#CF222E;">class</span><span style="color:#24292F;"> </span><span style="color:#953800;">IPacket</span><span style="color:#24292F;"> {</span></span>
<span class="line"><span style="color:#CF222E;">public:</span></span>
<span class="line"><span style="color:#24292F;">    </span><span style="color:#CF222E;">virtual</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">~IPacket</span><span style="color:#24292F;">() </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">default</span><span style="color:#24292F;">;</span></span>
<span class="line"><span style="color:#24292F;">    </span><span style="color:#CF222E;">virtual</span><span style="color:#24292F;"> </span><span style="color:#953800;">PacketType</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">getType</span><span style="color:#24292F;">() </span><span style="color:#CF222E;">const</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">0</span><span style="color:#24292F;">;</span></span>
<span class="line"><span style="color:#24292F;">    </span><span style="color:#CF222E;">virtual</span><span style="color:#24292F;"> </span><span style="color:#953800;">std</span><span style="color:#24292F;">::</span><span style="color:#953800;">vector</span><span style="color:#24292F;">&lt;</span><span style="color:#CF222E;">uint8_t</span><span style="color:#24292F;">&gt; </span><span style="color:#8250DF;">serialize</span><span style="color:#24292F;">() </span><span style="color:#CF222E;">const</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">0</span><span style="color:#24292F;">;</span></span>
<span class="line"><span style="color:#24292F;">    </span><span style="color:#CF222E;">virtual</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">void</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">deserialize</span><span style="color:#24292F;">(</span><span style="color:#CF222E;">const</span><span style="color:#24292F;"> </span><span style="color:#953800;">std</span><span style="color:#24292F;">::</span><span style="color:#953800;">vector</span><span style="color:#24292F;">&lt;</span><span style="color:#CF222E;">uint8_t</span><span style="color:#24292F;">&gt;</span><span style="color:#CF222E;">&amp;</span><span style="color:#24292F;"> </span><span style="color:#953800;">data</span><span style="color:#24292F;">) </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">0</span><span style="color:#24292F;">;</span></span>
<span class="line"><span style="color:#24292F;">};</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="en-tete-standard-des-paquets-binaires" tabindex="-1">En-t\xEAte standard des paquets binaires <a class="header-anchor" href="#en-tete-standard-des-paquets-binaires" aria-hidden="true">#</a></h3><table><thead><tr><th>Champ</th><th>Taille</th><th>Description</th></tr></thead><tbody><tr><td>Type</td><td>1 octet</td><td>Identifie le type du paquet (<code>PacketType</code>)</td></tr><tr><td>Taille</td><td>2 octets</td><td>Taille du corps du paquet</td></tr><tr><td>Donn\xE9es</td><td>variable</td><td>Donn\xE9es sp\xE9cifiques (texte, entit\xE9s, \xE9tats, etc.)</td></tr></tbody></table><h3 id="exemple-de-serialisation" tabindex="-1">Exemple de s\xE9rialisation <a class="header-anchor" href="#exemple-de-serialisation" aria-hidden="true">#</a></h3><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki vp-code-dark"><code><span class="line"><span style="color:#FFA657;">std</span><span style="color:#C9D1D9;">::</span><span style="color:#FFA657;">vector</span><span style="color:#C9D1D9;">&lt;</span><span style="color:#FF7B72;">uint8_t</span><span style="color:#C9D1D9;">&gt; </span><span style="color:#FFA657;">LoginPacket</span><span style="color:#C9D1D9;">::</span><span style="color:#D2A8FF;">serialize</span><span style="color:#C9D1D9;">() </span><span style="color:#FF7B72;">const</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FFA657;">std</span><span style="color:#C9D1D9;">::vector</span><span style="color:#FF7B72;">&lt;uint8_t&gt;</span><span style="color:#C9D1D9;"> data;</span></span>
<span class="line"><span style="color:#C9D1D9;">    data.</span><span style="color:#D2A8FF;">push_back</span><span style="color:#C9D1D9;">(</span><span style="color:#FF7B72;">static_cast&lt;uint8_t&gt;</span><span style="color:#C9D1D9;">(</span><span style="color:#FFA657;">PacketType</span><span style="color:#C9D1D9;">::LOGIN));</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#D2A8FF;">appendString</span><span style="color:#C9D1D9;">(data, username);</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#D2A8FF;">appendString</span><span style="color:#C9D1D9;">(data, version);</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">return</span><span style="color:#C9D1D9;"> data;</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><pre class="shiki vp-code-light"><code><span class="line"><span style="color:#953800;">std</span><span style="color:#24292F;">::</span><span style="color:#953800;">vector</span><span style="color:#24292F;">&lt;</span><span style="color:#CF222E;">uint8_t</span><span style="color:#24292F;">&gt; </span><span style="color:#953800;">LoginPacket</span><span style="color:#24292F;">::</span><span style="color:#8250DF;">serialize</span><span style="color:#24292F;">() </span><span style="color:#CF222E;">const</span><span style="color:#24292F;"> {</span></span>
<span class="line"><span style="color:#24292F;">    </span><span style="color:#953800;">std</span><span style="color:#24292F;">::vector</span><span style="color:#CF222E;">&lt;uint8_t&gt;</span><span style="color:#24292F;"> data;</span></span>
<span class="line"><span style="color:#24292F;">    data.</span><span style="color:#8250DF;">push_back</span><span style="color:#24292F;">(</span><span style="color:#CF222E;">static_cast&lt;uint8_t&gt;</span><span style="color:#24292F;">(</span><span style="color:#953800;">PacketType</span><span style="color:#24292F;">::LOGIN));</span></span>
<span class="line"><span style="color:#24292F;">    </span><span style="color:#8250DF;">appendString</span><span style="color:#24292F;">(data, username);</span></span>
<span class="line"><span style="color:#24292F;">    </span><span style="color:#8250DF;">appendString</span><span style="color:#24292F;">(data, version);</span></span>
<span class="line"><span style="color:#24292F;">    </span><span style="color:#CF222E;">return</span><span style="color:#24292F;"> data;</span></span>
<span class="line"><span style="color:#24292F;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="exemple-de-deserialisation" tabindex="-1">Exemple de d\xE9s\xE9rialisation <a class="header-anchor" href="#exemple-de-deserialisation" aria-hidden="true">#</a></h3><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki vp-code-dark"><code><span class="line"><span style="color:#FF7B72;">void</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">LoginPacket</span><span style="color:#C9D1D9;">::</span><span style="color:#D2A8FF;">deserialize</span><span style="color:#C9D1D9;">(</span><span style="color:#FF7B72;">const</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">std</span><span style="color:#C9D1D9;">::</span><span style="color:#FFA657;">vector</span><span style="color:#C9D1D9;">&lt;</span><span style="color:#FF7B72;">uint8_t</span><span style="color:#C9D1D9;">&gt;</span><span style="color:#FF7B72;">&amp;</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">data</span><span style="color:#C9D1D9;">) {</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">size_t</span><span style="color:#C9D1D9;"> offset </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">1</span><span style="color:#C9D1D9;">;</span></span>
<span class="line"><span style="color:#C9D1D9;">    username </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">readString</span><span style="color:#C9D1D9;">(data, offset);</span></span>
<span class="line"><span style="color:#C9D1D9;">    version </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">readString</span><span style="color:#C9D1D9;">(data, offset);</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><pre class="shiki vp-code-light"><code><span class="line"><span style="color:#CF222E;">void</span><span style="color:#24292F;"> </span><span style="color:#953800;">LoginPacket</span><span style="color:#24292F;">::</span><span style="color:#8250DF;">deserialize</span><span style="color:#24292F;">(</span><span style="color:#CF222E;">const</span><span style="color:#24292F;"> </span><span style="color:#953800;">std</span><span style="color:#24292F;">::</span><span style="color:#953800;">vector</span><span style="color:#24292F;">&lt;</span><span style="color:#CF222E;">uint8_t</span><span style="color:#24292F;">&gt;</span><span style="color:#CF222E;">&amp;</span><span style="color:#24292F;"> </span><span style="color:#953800;">data</span><span style="color:#24292F;">) {</span></span>
<span class="line"><span style="color:#24292F;">    </span><span style="color:#CF222E;">size_t</span><span style="color:#24292F;"> offset </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">1</span><span style="color:#24292F;">;</span></span>
<span class="line"><span style="color:#24292F;">    username </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">readString</span><span style="color:#24292F;">(data, offset);</span></span>
<span class="line"><span style="color:#24292F;">    version </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">readString</span><span style="color:#24292F;">(data, offset);</span></span>
<span class="line"><span style="color:#24292F;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><hr><h2 id="_5-gestion-centralisee-des-paquets" tabindex="-1">5. Gestion centralis\xE9e des paquets <a class="header-anchor" href="#_5-gestion-centralisee-des-paquets" aria-hidden="true">#</a></h2><p>Deux classes assurent la modularit\xE9 et l\u2019\xE9volutivit\xE9 du protocole :</p><table><thead><tr><th>Classe</th><th>R\xF4le</th></tr></thead><tbody><tr><td><strong>PacketsFactory</strong></td><td>Cr\xE9e le bon type de paquet selon le type lu dans le header.</td></tr><tr><td><strong>PacketsManager</strong></td><td>S\xE9rialise et d\xE9s\xE9rialise les paquets de mani\xE8re uniforme.</td></tr></tbody></table><h3 id="exemple" tabindex="-1">Exemple <a class="header-anchor" href="#exemple" aria-hidden="true">#</a></h3><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki vp-code-dark"><code><span class="line"><span style="color:#FF7B72;">auto</span><span style="color:#C9D1D9;"> login </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">LoginPacket</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&quot;Player1&quot;</span><span style="color:#C9D1D9;">, </span><span style="color:#A5D6FF;">&quot;v1.0&quot;</span><span style="color:#C9D1D9;">, </span><span style="color:#A5D6FF;">&quot;R-Type&quot;</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"><span style="color:#FF7B72;">auto</span><span style="color:#C9D1D9;"> bytes </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> packetManager.</span><span style="color:#D2A8FF;">buildPacket</span><span style="color:#C9D1D9;">(login);</span></span>
<span class="line"><span style="color:#FF7B72;">auto</span><span style="color:#C9D1D9;"> parsed </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> packetManager.</span><span style="color:#D2A8FF;">parsePacket</span><span style="color:#C9D1D9;">(bytes);</span></span>
<span class="line"></span></code></pre><pre class="shiki vp-code-light"><code><span class="line"><span style="color:#CF222E;">auto</span><span style="color:#24292F;"> login </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">LoginPacket</span><span style="color:#24292F;">(</span><span style="color:#0A3069;">&quot;Player1&quot;</span><span style="color:#24292F;">, </span><span style="color:#0A3069;">&quot;v1.0&quot;</span><span style="color:#24292F;">, </span><span style="color:#0A3069;">&quot;R-Type&quot;</span><span style="color:#24292F;">);</span></span>
<span class="line"><span style="color:#CF222E;">auto</span><span style="color:#24292F;"> bytes </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> packetManager.</span><span style="color:#8250DF;">buildPacket</span><span style="color:#24292F;">(login);</span></span>
<span class="line"><span style="color:#CF222E;">auto</span><span style="color:#24292F;"> parsed </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> packetManager.</span><span style="color:#8250DF;">parsePacket</span><span style="color:#24292F;">(bytes);</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Cette approche permet d\u2019ajouter de nouveaux paquets sans modifier le c\u0153ur r\xE9seau.</p><hr><h2 id="_6-communication-asynchrone-boost-asio" tabindex="-1">6. Communication asynchrone (Boost.Asio) <a class="header-anchor" href="#_6-communication-asynchrone-boost-asio" aria-hidden="true">#</a></h2><p>Le protocole repose sur un mod\xE8le <strong>asynchrone non-bloquant</strong>, gr\xE2ce \xE0 Boost.Asio :</p><h3 id="exemple-cote-serveur" tabindex="-1">Exemple c\xF4t\xE9 serveur <a class="header-anchor" href="#exemple-cote-serveur" aria-hidden="true">#</a></h3><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki vp-code-dark"><code><span class="line"><span style="color:#C9D1D9;">acceptor.</span><span style="color:#D2A8FF;">async_accept</span><span style="color:#C9D1D9;">(socket, handler);</span></span>
<span class="line"></span></code></pre><pre class="shiki vp-code-light"><code><span class="line"><span style="color:#24292F;">acceptor.</span><span style="color:#8250DF;">async_accept</span><span style="color:#24292F;">(socket, handler);</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br></div></div><ul><li>Permet de g\xE9rer plusieurs connexions simultan\xE9ment (multiclient TCP).</li><li>Chaque client poss\xE8de son propre thread <code>io_context</code>.</li></ul><h3 id="exemple-cote-client" tabindex="-1">Exemple c\xF4t\xE9 client <a class="header-anchor" href="#exemple-cote-client" aria-hidden="true">#</a></h3><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki vp-code-dark"><code><span class="line"><span style="color:#C9D1D9;">socket.</span><span style="color:#D2A8FF;">async_receive_from</span><span style="color:#C9D1D9;">(buffer, sender_endpoint, handler);</span></span>
<span class="line"></span></code></pre><pre class="shiki vp-code-light"><code><span class="line"><span style="color:#24292F;">socket.</span><span style="color:#8250DF;">async_receive_from</span><span style="color:#24292F;">(buffer, sender_endpoint, handler);</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br></div></div><ul><li>Permet la r\xE9ception continue sans bloquer le flux d\u2019entr\xE9e.</li><li>Combine un thread <code>io.run()</code> et un thread d\u2019entr\xE9e utilisateur.</li></ul><hr><h2 id="_7-integrite-et-securite" tabindex="-1">7. Int\xE9grit\xE9 et s\xE9curit\xE9 <a class="header-anchor" href="#_7-integrite-et-securite" aria-hidden="true">#</a></h2><p>Le protocole pr\xE9voit des m\xE9canismes d\u2019extension pour :</p><ul><li><strong>compression</strong> des paquets (r\xE9duction du trafic),</li><li><strong>chiffrement</strong> (protection des donn\xE9es sensibles comme le login),</li><li><strong>v\xE9rification CRC / checksum</strong> pour d\xE9tecter les paquets corrompus.</li></ul><p>Ces fonctionnalit\xE9s sont optionnelles mais pr\xEAtes \xE0 l\u2019int\xE9gration via les utilitaires <code>encrypt.cpp</code> et <code>compress.cpp</code>.</p><hr><h2 id="_8-sequence-de-communication-typique" tabindex="-1">8. S\xE9quence de communication typique <a class="header-anchor" href="#_8-sequence-de-communication-typique" aria-hidden="true">#</a></h2><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki vp-code-dark"><code><span class="line"><span style="color:#c9d1d9;">[Client] ---------------------------------------- TCP ----------------------------------------&gt; [Serveur]</span></span>
<span class="line"><span style="color:#c9d1d9;">           LoginPacket { username=&quot;Player1&quot;, version=&quot;R-Type&quot; }</span></span>
<span class="line"><span style="color:#c9d1d9;"></span></span>
<span class="line"><span style="color:#c9d1d9;">[Serveur] &lt;-------------------------------------- TCP ----------------------------------------- [Client]</span></span>
<span class="line"><span style="color:#c9d1d9;">           RoomPacket { port=4000 }</span></span>
<span class="line"><span style="color:#c9d1d9;"></span></span>
<span class="line"><span style="color:#c9d1d9;">[Client] ---------------------------------------- UDP ----------------------------------------&gt; [Serveur]</span></span>
<span class="line"><span style="color:#c9d1d9;">           InputPacket { inputMask=0b1010 }</span></span>
<span class="line"><span style="color:#c9d1d9;"></span></span>
<span class="line"><span style="color:#c9d1d9;">[Serveur] &lt;-------------------------------------- UDP ----------------------------------------- [Client]</span></span>
<span class="line"><span style="color:#c9d1d9;">           GameStatePacket { entities=[player1, enemy, bullet...] }</span></span>
<span class="line"><span style="color:#c9d1d9;"></span></span>
<span class="line"><span style="color:#c9d1d9;">[Client] ---------------------------------------- TCP ----------------------------------------&gt; [Serveur]</span></span>
<span class="line"><span style="color:#c9d1d9;">           DisconnectPacket</span></span>
<span class="line"><span style="color:#c9d1d9;"></span></span></code></pre><pre class="shiki vp-code-light"><code><span class="line"><span style="color:#24292f;">[Client] ---------------------------------------- TCP ----------------------------------------&gt; [Serveur]</span></span>
<span class="line"><span style="color:#24292f;">           LoginPacket { username=&quot;Player1&quot;, version=&quot;R-Type&quot; }</span></span>
<span class="line"><span style="color:#24292f;"></span></span>
<span class="line"><span style="color:#24292f;">[Serveur] &lt;-------------------------------------- TCP ----------------------------------------- [Client]</span></span>
<span class="line"><span style="color:#24292f;">           RoomPacket { port=4000 }</span></span>
<span class="line"><span style="color:#24292f;"></span></span>
<span class="line"><span style="color:#24292f;">[Client] ---------------------------------------- UDP ----------------------------------------&gt; [Serveur]</span></span>
<span class="line"><span style="color:#24292f;">           InputPacket { inputMask=0b1010 }</span></span>
<span class="line"><span style="color:#24292f;"></span></span>
<span class="line"><span style="color:#24292f;">[Serveur] &lt;-------------------------------------- UDP ----------------------------------------- [Client]</span></span>
<span class="line"><span style="color:#24292f;">           GameStatePacket { entities=[player1, enemy, bullet...] }</span></span>
<span class="line"><span style="color:#24292f;"></span></span>
<span class="line"><span style="color:#24292f;">[Client] ---------------------------------------- TCP ----------------------------------------&gt; [Serveur]</span></span>
<span class="line"><span style="color:#24292f;">           DisconnectPacket</span></span>
<span class="line"><span style="color:#24292f;"></span></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><hr><h2 id="_9-typologie-des-paquets" tabindex="-1">9. Typologie des paquets <a class="header-anchor" href="#_9-typologie-des-paquets" aria-hidden="true">#</a></h2><table><thead><tr><th>Type</th><th>Code Hex</th><th>Description</th><th>Transport</th></tr></thead><tbody><tr><td><code>LOGIN</code></td><td><code>0x01</code></td><td>Authentification du joueur</td><td>TCP</td></tr><tr><td><code>LOGOUT</code></td><td><code>0x02</code></td><td>D\xE9connexion propre</td><td>TCP</td></tr><tr><td><code>ROOMCONNECTION</code></td><td><code>0x03</code></td><td>Informations pour rejoindre une room</td><td>TCP</td></tr><tr><td><code>INPUT</code></td><td><code>0x10</code></td><td>Entr\xE9es joueur (clavier / manette)</td><td>UDP</td></tr><tr><td><code>GAME_STATE</code></td><td><code>0x11</code></td><td>\xC9tat global du jeu (positions, etc.)</td><td>UDP</td></tr><tr><td><code>SPAWN_ENTITY</code></td><td><code>0x12</code></td><td>Apparition d\u2019une entit\xE9</td><td>UDP</td></tr><tr><td><code>DESTROY_ENTITY</code></td><td><code>0x13</code></td><td>Suppression d\u2019une entit\xE9</td><td>UDP</td></tr><tr><td><code>UPDATE_ENTITY</code></td><td><code>0x14</code></td><td>Mise \xE0 jour d\u2019une entit\xE9</td><td>UDP</td></tr><tr><td><code>PING</code></td><td><code>0x20</code></td><td>V\xE9rification de latence</td><td>TCP</td></tr><tr><td><code>PONG</code></td><td><code>0x21</code></td><td>R\xE9ponse au ping</td><td>TCP</td></tr><tr><td><code>ERROR_PACKET</code></td><td><code>0xFF</code></td><td>Paquet invalide ou non reconnu</td><td>TCP</td></tr></tbody></table><hr><h2 id="_10-gestion-des-rooms" tabindex="-1">10. Gestion des Rooms <a class="header-anchor" href="#_10-gestion-des-rooms" aria-hidden="true">#</a></h2><ul><li>Chaque <strong>Room</strong> correspond \xE0 un serveur UDP distinct, cr\xE9\xE9 \xE0 la demande.</li><li>Le port UDP est communiqu\xE9 au client via un <code>RoomPacket</code>.</li><li>Le client fork ou lance un nouveau processus d\xE9di\xE9 (<code>ClientRoom</code>) pour g\xE9rer la partie.</li></ul><h3 id="avantages" tabindex="-1">Avantages : <a class="header-anchor" href="#avantages" aria-hidden="true">#</a></h3><ul><li>Isolation compl\xE8te entre les parties.</li><li>Possibilit\xE9 d\u2019avoir plusieurs rooms en parall\xE8le.</li><li>\xC9volutif (un serveur peut h\xE9berger plusieurs rooms simultan\xE9ment).</li></ul><hr><h2 id="_11-resume" tabindex="-1">11. R\xE9sum\xE9 <a class="header-anchor" href="#_11-resume" aria-hidden="true">#</a></h2><table><thead><tr><th>\xC9tape</th><th>Paquets utilis\xE9s</th><th>Protocole</th><th>R\xF4le</th></tr></thead><tbody><tr><td>Authentification</td><td><code>LoginPacket</code></td><td>TCP</td><td>Connexion du joueur</td></tr><tr><td>Attribution de room</td><td><code>RoomPacket</code></td><td>TCP</td><td>Redirection vers un serveur de jeu</td></tr><tr><td>Gameplay</td><td><code>InputPacket</code>, <code>GameStatePacket</code></td><td>UDP</td><td>Synchronisation temps r\xE9el</td></tr><tr><td>Fin de partie</td><td><code>DisconnectPacket</code></td><td>TCP</td><td>Fermeture propre</td></tr></tbody></table><hr><h2 id="_12-points-cles-du-design" tabindex="-1">12. Points cl\xE9s du design <a class="header-anchor" href="#_12-points-cles-du-design" aria-hidden="true">#</a></h2><ul><li><strong>TCP pour la fiabilit\xE9</strong>, UDP pour la <strong>rapidit\xE9</strong>.</li><li>Architecture modulaire (chaque paquet est une classe autonome).</li><li>S\xE9rialisation binaire uniforme et extensible.</li><li>Communication asynchrone et non bloquante.</li><li>Pr\xEAte pour le multithreading et la mont\xE9e en charge.</li></ul><hr>`,81),o=[t];function p(r,c,i,d,u,y){return e(),n("div",null,o)}const m=s(l,[["render",p]]);export{h as __pageData,m as default};
