import{_ as s,c as n,o as a,a as e}from"./app.ab183e9a.js";const d=JSON.parse('{"title":"Mouvement, Physique, View et PhysicsSystem","description":"","frontmatter":{},"headers":[{"level":2,"title":"1) Composants de Mouvement & Physique","slug":"_1-composants-de-mouvement-physique","link":"#_1-composants-de-mouvement-physique","children":[]},{"level":2,"title":"2) La view ECS","slug":"_2-la-view-ecs","link":"#_2-la-view-ecs","children":[]},{"level":2,"title":"3) PhysicsSystem","slug":"_3-physicssystem","link":"#_3-physicssystem","children":[]},{"level":2,"title":"4) Cr\xE9ation d\u2019entit\xE9s et exemple minimal","slug":"_4-creation-d-entites-et-exemple-minimal","link":"#_4-creation-d-entites-et-exemple-minimal","children":[]}],"relativePath":"R-type_Part1/ECS/System/Physic.md"}'),p={name:"R-type_Part1/ECS/System/Physic.md"},l=e(`<h1 id="mouvement-physique-view-et-physicssystem" tabindex="-1">Mouvement, Physique, View et PhysicsSystem <a class="header-anchor" href="#mouvement-physique-view-et-physicssystem" aria-hidden="true">#</a></h1><p>Ce document r\xE9capitule les composants li\xE9s au mouvement et \xE0 la physique, explique la classe <code>view</code> (ECS) et d\xE9crit le <code>PhysicsSystem</code>.</p><p>Liens utiles:</p><ul><li>View: <a href="../../../../../../GameEngine/Registry/View.hpp">GameEngine/Registry/View.hpp</a></li><li>PhysicsSystem: <a href="../../../../../../GameEngine/Physics/Systems/PhysicsSystem.cpp">GameEngine/Physics/Systems/PhysicsSystem.cpp</a>, <a href="../../../../../../GameEngine/Physics/Systems/PhysicsSystem.hpp">GameEngine/Physics/Systems/PhysicsSystem.hpp</a></li><li>Composants physiques: <a href="../../../../../../GameEngine/Physics/Components/Physics.hpp">GameEngine/Physics/Components/Physics.hpp</a>, <a href="../../../../../../GameEngine/Physics/Components/Movement.hpp">GameEngine/Physics/Components/Movement.hpp</a></li></ul><hr><h2 id="_1-composants-de-mouvement-physique" tabindex="-1">1) Composants de Mouvement &amp; Physique <a class="header-anchor" href="#_1-composants-de-mouvement-physique" aria-hidden="true">#</a></h2><p>D\xE9clar\xE9s dans:</p><ul><li><a href="../../../../../../GameEngine/Physics/Components/Movement.hpp">GameEngine/Physics/Components/Movement.hpp</a></li><li><a href="../../../../../../GameEngine/Physics/Components/Physics.hpp">GameEngine/Physics/Components/Physics.hpp</a></li></ul><p>Composants principaux:</p><ul><li><p>PositionComponent</p><ul><li>Repr\xE9sente la position 2D.</li><li>Champs (utilis\xE9s dans les tests): <code>x</code>, <code>y</code>.</li></ul></li><li><p>VelocityComponent</p><ul><li>Vitesse en 2D.</li><li>Champs (utilis\xE9s dans les tests): <code>vx</code>, <code>vy</code>.</li></ul></li><li><p>AccelerationComponent</p><ul><li>Acc\xE9l\xE9ration en 2D.</li><li>Champs attendus (convention): <code>ax</code>, <code>ay</code>.</li></ul></li><li><p>GravityComponent</p><ul><li>Acc\xE9l\xE9ration due \xE0 la gravit\xE9 appliqu\xE9e \xE0 une entit\xE9.</li></ul></li><li><p>BoundaryComponent</p><ul><li>R\xE8gles de limites (ex: \xE9cran/salle). Utilis\xE9 par <code>handleBoundary(...)</code> du PhysicsSystem.</li><li>Sert \xE0 clamp/wrap/rebond en bordure (selon impl\xE9mentation du projet).</li></ul></li><li><p>(Optionnel si pr\xE9sent) Rotation/AngularVelocity</p><ul><li><code>PhysicsSystem::updateRotation(...)</code> g\xE8re l\u2019angle si vos composants de rotation existent.</li></ul></li></ul><hr><h2 id="_2-la-view-ecs" tabindex="-1">2) La view ECS <a class="header-anchor" href="#_2-la-view-ecs" aria-hidden="true">#</a></h2><p>Fichier: <a href="../../../../../../GameEngine/Registry/View.hpp">GameEngine/Registry/View.hpp</a></p><p>Objectif:</p><ul><li>It\xE9rer efficacement uniquement sur les entit\xE9s qui poss\xE8dent un ensemble de composants donn\xE9.</li></ul><p>Fonctionnement:</p><ul><li><code>view&lt;Components...&gt;</code> expose un it\xE9rateur interne qui: <ul><li>Avance l\u2019index entit\xE9 jusqu\u2019\xE0 trouver une entit\xE9 qui poss\xE8de tous les composants requis (via <code>sparse_array&lt;T&gt;::has(id)</code>).</li><li>Permet l\u2019usage en boucle <code>for (auto e : view&lt;...&gt;(reg))</code>.</li></ul></li></ul><p>Pourquoi c\u2019est important:</p><ul><li>Performance: \xE9vite de parcourir des entit\xE9s sans les bons composants.</li><li>Lisibilit\xE9: boucle claire par combinaison de composants.</li><li>S\xE9curit\xE9 de type: les composants requis sont d\xE9finis au compile-time.</li></ul><p>Exemple d\u2019usage:</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki vp-code-dark"><code><span class="line"><span style="color:#FF7B72;">#include</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;GameEngine/Registry/View.hpp&quot;</span></span>
<span class="line"><span style="color:#FF7B72;">#include</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;GameEngine/Registry/Registry.hpp&quot;</span></span>
<span class="line"><span style="color:#FF7B72;">#include</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;GameEngine/Physics/Components/Movement.hpp&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF7B72;">void</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">integrate</span><span style="color:#C9D1D9;">(</span><span style="color:#FFA657;">registry</span><span style="color:#FF7B72;">&amp;</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">reg</span><span style="color:#C9D1D9;">, </span><span style="color:#FF7B72;">float</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">dt</span><span style="color:#C9D1D9;">) {</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">for</span><span style="color:#C9D1D9;"> (</span><span style="color:#FF7B72;">auto</span><span style="color:#C9D1D9;"> e : </span><span style="color:#D2A8FF;">view</span><span style="color:#C9D1D9;">&lt;</span><span style="color:#FFA657;">PositionComponent</span><span style="color:#C9D1D9;">, </span><span style="color:#FFA657;">VelocityComponent</span><span style="color:#C9D1D9;">&gt;(reg)) {</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#FF7B72;">auto&amp;</span><span style="color:#C9D1D9;"> pos </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> reg.get_components</span><span style="color:#FF7B72;">&lt;</span><span style="color:#C9D1D9;">PositionComponent</span><span style="color:#FF7B72;">&gt;</span><span style="color:#C9D1D9;">()[e];</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#FF7B72;">auto&amp;</span><span style="color:#C9D1D9;"> vel </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> reg.get_components</span><span style="color:#FF7B72;">&lt;</span><span style="color:#C9D1D9;">VelocityComponent</span><span style="color:#FF7B72;">&gt;</span><span style="color:#C9D1D9;">()[e];</span></span>
<span class="line"><span style="color:#C9D1D9;">        pos.x </span><span style="color:#FF7B72;">+=</span><span style="color:#C9D1D9;"> vel.vx </span><span style="color:#FF7B72;">*</span><span style="color:#C9D1D9;"> dt;</span></span>
<span class="line"><span style="color:#C9D1D9;">        pos.y </span><span style="color:#FF7B72;">+=</span><span style="color:#C9D1D9;"> vel.vy </span><span style="color:#FF7B72;">*</span><span style="color:#C9D1D9;"> dt;</span></span>
<span class="line"><span style="color:#C9D1D9;">    }</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><pre class="shiki vp-code-light"><code><span class="line"><span style="color:#CF222E;">#include</span><span style="color:#24292F;"> </span><span style="color:#0A3069;">&quot;GameEngine/Registry/View.hpp&quot;</span></span>
<span class="line"><span style="color:#CF222E;">#include</span><span style="color:#24292F;"> </span><span style="color:#0A3069;">&quot;GameEngine/Registry/Registry.hpp&quot;</span></span>
<span class="line"><span style="color:#CF222E;">#include</span><span style="color:#24292F;"> </span><span style="color:#0A3069;">&quot;GameEngine/Physics/Components/Movement.hpp&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#CF222E;">void</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">integrate</span><span style="color:#24292F;">(</span><span style="color:#953800;">registry</span><span style="color:#CF222E;">&amp;</span><span style="color:#24292F;"> </span><span style="color:#953800;">reg</span><span style="color:#24292F;">, </span><span style="color:#CF222E;">float</span><span style="color:#24292F;"> </span><span style="color:#953800;">dt</span><span style="color:#24292F;">) {</span></span>
<span class="line"><span style="color:#24292F;">    </span><span style="color:#CF222E;">for</span><span style="color:#24292F;"> (</span><span style="color:#CF222E;">auto</span><span style="color:#24292F;"> e : </span><span style="color:#8250DF;">view</span><span style="color:#24292F;">&lt;</span><span style="color:#953800;">PositionComponent</span><span style="color:#24292F;">, </span><span style="color:#953800;">VelocityComponent</span><span style="color:#24292F;">&gt;(reg)) {</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#CF222E;">auto&amp;</span><span style="color:#24292F;"> pos </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> reg.get_components</span><span style="color:#CF222E;">&lt;</span><span style="color:#24292F;">PositionComponent</span><span style="color:#CF222E;">&gt;</span><span style="color:#24292F;">()[e];</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#CF222E;">auto&amp;</span><span style="color:#24292F;"> vel </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> reg.get_components</span><span style="color:#CF222E;">&lt;</span><span style="color:#24292F;">VelocityComponent</span><span style="color:#CF222E;">&gt;</span><span style="color:#24292F;">()[e];</span></span>
<span class="line"><span style="color:#24292F;">        pos.x </span><span style="color:#CF222E;">+=</span><span style="color:#24292F;"> vel.vx </span><span style="color:#CF222E;">*</span><span style="color:#24292F;"> dt;</span></span>
<span class="line"><span style="color:#24292F;">        pos.y </span><span style="color:#CF222E;">+=</span><span style="color:#24292F;"> vel.vy </span><span style="color:#CF222E;">*</span><span style="color:#24292F;"> dt;</span></span>
<span class="line"><span style="color:#24292F;">    }</span></span>
<span class="line"><span style="color:#24292F;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><hr><h2 id="_3-physicssystem" tabindex="-1">3) PhysicsSystem <a class="header-anchor" href="#_3-physicssystem" aria-hidden="true">#</a></h2><p>Fichiers:</p><ul><li><a href="../../../../../../GameEngine/Physics/Systems/PhysicsSystem.hpp">GameEngine/Physics/Systems/PhysicsSystem.hpp</a></li><li><a href="../../../../../../GameEngine/Physics/Systems/PhysicsSystem.cpp">GameEngine/Physics/Systems/PhysicsSystem.cpp</a></li></ul><p>R\xF4le:</p><ul><li>Appliquer la logique physique par frame: <ol><li><code>updateRotation(reg, dt)</code> \u2014 met \xE0 jour l\u2019angle (si composants de rotation pr\xE9sents).</li><li><code>applyGravity(reg, dt)</code> \u2014 ajoute l\u2019acc\xE9l\xE9ration de gravit\xE9 \xE0 la vitesse.</li><li><code>updateMovement(reg, dt)</code> \u2014 int\xE8gre la vitesse vers la position.</li><li><code>handleBoundary(...)</code> \u2014 applique la r\xE8gle de bordure si <code>BoundaryComponent</code> existe.</li></ol></li></ul><p>Boucle type:</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki vp-code-dark"><code><span class="line"><span style="color:#FF7B72;">#include</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&quot;GameEngine/Physics/Systems/PhysicsSystem.hpp&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF7B72;">void</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">run_physics</span><span style="color:#C9D1D9;">(</span><span style="color:#FFA657;">registry</span><span style="color:#FF7B72;">&amp;</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">reg</span><span style="color:#C9D1D9;">, </span><span style="color:#FF7B72;">float</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">dt</span><span style="color:#C9D1D9;">) {</span></span>
<span class="line"><span style="color:#C9D1D9;">    PhysicsSystem physics;</span></span>
<span class="line"><span style="color:#C9D1D9;">    physics.</span><span style="color:#D2A8FF;">update</span><span style="color:#C9D1D9;">(reg, dt);</span><span style="color:#8B949E;"> // appelle updateRotation -&gt; applyGravity -&gt; updateMovement</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><pre class="shiki vp-code-light"><code><span class="line"><span style="color:#CF222E;">#include</span><span style="color:#24292F;"> </span><span style="color:#0A3069;">&quot;GameEngine/Physics/Systems/PhysicsSystem.hpp&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#CF222E;">void</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">run_physics</span><span style="color:#24292F;">(</span><span style="color:#953800;">registry</span><span style="color:#CF222E;">&amp;</span><span style="color:#24292F;"> </span><span style="color:#953800;">reg</span><span style="color:#24292F;">, </span><span style="color:#CF222E;">float</span><span style="color:#24292F;"> </span><span style="color:#953800;">dt</span><span style="color:#24292F;">) {</span></span>
<span class="line"><span style="color:#24292F;">    PhysicsSystem physics;</span></span>
<span class="line"><span style="color:#24292F;">    physics.</span><span style="color:#8250DF;">update</span><span style="color:#24292F;">(reg, dt);</span><span style="color:#6E7781;"> // appelle updateRotation -&gt; applyGravity -&gt; updateMovement</span></span>
<span class="line"><span style="color:#24292F;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>Int\xE9gration ECS:</p><ul><li>Peut s\u2019appuyer sur <code>view&lt;...&gt;</code> pour cibler les entit\xE9s munies des bons composants.</li><li>Une version plugin .so est aussi fournie (voir PHYSICS_PLUGINS_GUIDE.md) pour chargement dynamique.</li></ul><hr><h2 id="_4-creation-d-entites-et-exemple-minimal" tabindex="-1">4) Cr\xE9ation d\u2019entit\xE9s et exemple minimal <a class="header-anchor" href="#_4-creation-d-entites-et-exemple-minimal" aria-hidden="true">#</a></h2><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki vp-code-dark"><code><span class="line"><span style="color:#C9D1D9;">registry reg;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#8B949E;">// Entit\xE9 mobile soumise \xE0 la gravit\xE9</span></span>
<span class="line"><span style="color:#FF7B72;">auto</span><span style="color:#C9D1D9;"> e </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> reg.</span><span style="color:#D2A8FF;">spawn_entity</span><span style="color:#C9D1D9;">();</span></span>
<span class="line"><span style="color:#C9D1D9;">reg.emplace_component</span><span style="color:#FF7B72;">&lt;</span><span style="color:#C9D1D9;">PositionComponent</span><span style="color:#FF7B72;">&gt;</span><span style="color:#C9D1D9;">(e, PositionComponent{</span><span style="color:#79C0FF;">0.</span><span style="color:#FF7B72;">f</span><span style="color:#C9D1D9;">, </span><span style="color:#79C0FF;">100.</span><span style="color:#FF7B72;">f</span><span style="color:#C9D1D9;">});</span></span>
<span class="line"><span style="color:#C9D1D9;">reg.emplace_component</span><span style="color:#FF7B72;">&lt;</span><span style="color:#C9D1D9;">VelocityComponent</span><span style="color:#FF7B72;">&gt;</span><span style="color:#C9D1D9;">(e, VelocityComponent{</span><span style="color:#79C0FF;">5.</span><span style="color:#FF7B72;">f</span><span style="color:#C9D1D9;">, </span><span style="color:#79C0FF;">0.</span><span style="color:#FF7B72;">f</span><span style="color:#C9D1D9;">});</span></span>
<span class="line"><span style="color:#C9D1D9;">reg.emplace_component</span><span style="color:#FF7B72;">&lt;</span><span style="color:#C9D1D9;">GravityComponent</span><span style="color:#FF7B72;">&gt;</span><span style="color:#C9D1D9;">(e, GravityComponent{</span><span style="color:#79C0FF;">0.</span><span style="color:#FF7B72;">f</span><span style="color:#C9D1D9;">, </span><span style="color:#FF7B72;">-</span><span style="color:#79C0FF;">9.8</span><span style="color:#FF7B72;">f</span><span style="color:#C9D1D9;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#8B949E;">// \xC9tape de simulation</span></span>
<span class="line"><span style="color:#C9D1D9;">PhysicsSystem physics;</span></span>
<span class="line"><span style="color:#C9D1D9;">physics.</span><span style="color:#D2A8FF;">update</span><span style="color:#C9D1D9;">(reg, </span><span style="color:#79C0FF;">0.016</span><span style="color:#FF7B72;">f</span><span style="color:#C9D1D9;">);</span><span style="color:#8B949E;"> // ~60 FPS</span></span>
<span class="line"></span></code></pre><pre class="shiki vp-code-light"><code><span class="line"><span style="color:#24292F;">registry reg;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6E7781;">// Entit\xE9 mobile soumise \xE0 la gravit\xE9</span></span>
<span class="line"><span style="color:#CF222E;">auto</span><span style="color:#24292F;"> e </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> reg.</span><span style="color:#8250DF;">spawn_entity</span><span style="color:#24292F;">();</span></span>
<span class="line"><span style="color:#24292F;">reg.emplace_component</span><span style="color:#CF222E;">&lt;</span><span style="color:#24292F;">PositionComponent</span><span style="color:#CF222E;">&gt;</span><span style="color:#24292F;">(e, PositionComponent{</span><span style="color:#0550AE;">0.</span><span style="color:#CF222E;">f</span><span style="color:#24292F;">, </span><span style="color:#0550AE;">100.</span><span style="color:#CF222E;">f</span><span style="color:#24292F;">});</span></span>
<span class="line"><span style="color:#24292F;">reg.emplace_component</span><span style="color:#CF222E;">&lt;</span><span style="color:#24292F;">VelocityComponent</span><span style="color:#CF222E;">&gt;</span><span style="color:#24292F;">(e, VelocityComponent{</span><span style="color:#0550AE;">5.</span><span style="color:#CF222E;">f</span><span style="color:#24292F;">, </span><span style="color:#0550AE;">0.</span><span style="color:#CF222E;">f</span><span style="color:#24292F;">});</span></span>
<span class="line"><span style="color:#24292F;">reg.emplace_component</span><span style="color:#CF222E;">&lt;</span><span style="color:#24292F;">GravityComponent</span><span style="color:#CF222E;">&gt;</span><span style="color:#24292F;">(e, GravityComponent{</span><span style="color:#0550AE;">0.</span><span style="color:#CF222E;">f</span><span style="color:#24292F;">, </span><span style="color:#CF222E;">-</span><span style="color:#0550AE;">9.8</span><span style="color:#CF222E;">f</span><span style="color:#24292F;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6E7781;">// \xC9tape de simulation</span></span>
<span class="line"><span style="color:#24292F;">PhysicsSystem physics;</span></span>
<span class="line"><span style="color:#24292F;">physics.</span><span style="color:#8250DF;">update</span><span style="color:#24292F;">(reg, </span><span style="color:#0550AE;">0.016</span><span style="color:#CF222E;">f</span><span style="color:#24292F;">);</span><span style="color:#6E7781;"> // ~60 FPS</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><hr>`,35),o=[l];function t(c,i,r,y,m,F){return a(),n("div",null,o)}const C=s(p,[["render",t]]);export{d as __pageData,C as default};
