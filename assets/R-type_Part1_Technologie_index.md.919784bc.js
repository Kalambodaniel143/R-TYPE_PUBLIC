import{_ as s,c as n,o as e,a}from"./app.7b93c3fb.js";const F=JSON.parse('{"title":"\xC9tude comparative : ECS vs OOP dans la conception d\u2019un moteur de jeu 2D en C++","description":"","frontmatter":{},"headers":[{"level":2,"title":"1. Introduction","slug":"_1-introduction","link":"#_1-introduction","children":[]},{"level":2,"title":"2. Rappel des deux paradigmes","slug":"_2-rappel-des-deux-paradigmes","link":"#_2-rappel-des-deux-paradigmes","children":[{"level":3,"title":"2.1 Programmation Orient\xE9e Objet (OOP)","slug":"_2-1-programmation-orientee-objet-oop","link":"#_2-1-programmation-orientee-objet-oop","children":[]},{"level":3,"title":"2.2 Entity Component System (ECS)","slug":"_2-2-entity-component-system-ecs","link":"#_2-2-entity-component-system-ecs","children":[]}]},{"level":2,"title":"3. Comparaison directe","slug":"_3-comparaison-directe","link":"#_3-comparaison-directe","children":[]},{"level":2,"title":"3. Comparaison directe","slug":"_3-comparaison-directe-1","link":"#_3-comparaison-directe-1","children":[]},{"level":2,"title":"4. Justification de notre choix (ECS)","slug":"_4-justification-de-notre-choix-ecs","link":"#_4-justification-de-notre-choix-ecs","children":[]},{"level":2,"title":"5. Conclusion","slug":"_5-conclusion","link":"#_5-conclusion","children":[]}],"relativePath":"R-type_Part1/Technologie/index.md"}'),t={name:"R-type_Part1/Technologie/index.md"},o=a(`<h1 id="etude-comparative-ecs-vs-oop-dans-la-conception-d-un-moteur-de-jeu-2d-en-c" tabindex="-1">\xC9tude comparative : ECS vs OOP dans la conception d\u2019un moteur de jeu 2D en C++ <a class="header-anchor" href="#etude-comparative-ecs-vs-oop-dans-la-conception-d-un-moteur-de-jeu-2d-en-c" aria-hidden="true">#</a></h1><h2 id="_1-introduction" tabindex="-1">1. Introduction <a class="header-anchor" href="#_1-introduction" aria-hidden="true">#</a></h2><p>Dans la conception de notre moteur de jeu 2D en C++, nous avons fait le choix d\u2019adopter une <strong>architecture ECS (Entity Component System)</strong> plut\xF4t qu\u2019une approche purement <strong>orient\xE9e objet (OOP)</strong>.<br> Ce document pr\xE9sente une \xE9tude comparative entre ces deux paradigmes, en mettant en avant les <strong>raisons techniques et structurelles</strong> de ce choix.</p><hr><h2 id="_2-rappel-des-deux-paradigmes" tabindex="-1">2. Rappel des deux paradigmes <a class="header-anchor" href="#_2-rappel-des-deux-paradigmes" aria-hidden="true">#</a></h2><h3 id="_2-1-programmation-orientee-objet-oop" tabindex="-1">2.1 Programmation Orient\xE9e Objet (OOP) <a class="header-anchor" href="#_2-1-programmation-orientee-objet-oop" aria-hidden="true">#</a></h3><p>L\u2019OOP repose sur la <strong>mod\xE9lisation du monde sous forme d\u2019objets</strong>.<br> Chaque objet combine <strong>donn\xE9es (attributs)</strong> et <strong>comportements (m\xE9thodes)</strong>.<br> On utilise des <strong>classes</strong>, <strong>h\xE9ritages</strong> et <strong>polymorphisme</strong> pour structurer le code.</p><p>Exemple :</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki vp-code-dark"><code><span class="line"><span style="color:#FF7B72;">class</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">Player</span><span style="color:#C9D1D9;"> : </span><span style="color:#FF7B72;">public</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">Entity</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"><span style="color:#FF7B72;">public:</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">void</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">move</span><span style="color:#C9D1D9;">();</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">void</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">render</span><span style="color:#C9D1D9;">();</span></span>
<span class="line"><span style="color:#FF7B72;">private:</span></span>
<span class="line"><span style="color:#C9D1D9;">    Vector2 position;</span></span>
<span class="line"><span style="color:#C9D1D9;">    Sprite sprite;</span></span>
<span class="line"><span style="color:#C9D1D9;">};</span></span>
<span class="line"></span></code></pre><pre class="shiki vp-code-light"><code><span class="line"><span style="color:#CF222E;">class</span><span style="color:#24292F;"> </span><span style="color:#953800;">Player</span><span style="color:#24292F;"> : </span><span style="color:#CF222E;">public</span><span style="color:#24292F;"> </span><span style="color:#953800;">Entity</span><span style="color:#24292F;"> {</span></span>
<span class="line"><span style="color:#CF222E;">public:</span></span>
<span class="line"><span style="color:#24292F;">    </span><span style="color:#CF222E;">void</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">move</span><span style="color:#24292F;">();</span></span>
<span class="line"><span style="color:#24292F;">    </span><span style="color:#CF222E;">void</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">render</span><span style="color:#24292F;">();</span></span>
<span class="line"><span style="color:#CF222E;">private:</span></span>
<span class="line"><span style="color:#24292F;">    Vector2 position;</span></span>
<span class="line"><span style="color:#24292F;">    Sprite sprite;</span></span>
<span class="line"><span style="color:#24292F;">};</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>Avantages :</p><p>Structure intuitive (proche du monde r\xE9el).</p><p>Encapsulation : chaque entit\xE9 g\xE8re son propre \xE9tat. H\xE9ritage et polymorphisme facilitent la r\xE9utilisation du code.</p><p>Inconv\xE9nients :</p><p>L\u2019h\xE9ritage multiple peut rendre la hi\xE9rarchie rigide et difficile \xE0 maintenir. Difficile d\u2019ajouter de nouveaux comportements sans casser la hi\xE9rarchie. Couplage fort entre donn\xE9es et logique (faible flexibilit\xE9).</p><h3 id="_2-2-entity-component-system-ecs" tabindex="-1">2.2 Entity Component System (ECS) <a class="header-anchor" href="#_2-2-entity-component-system-ecs" aria-hidden="true">#</a></h3><p>L\u2019ECS d\xE9couple compl\xE8tement les donn\xE9es (components) de la logique (systems). Une Entity n\u2019est qu\u2019un identifiant. Les Components stockent les donn\xE9es. Les Systems appliquent la logique sur les entit\xE9s poss\xE9dant certains composants.</p><p>Exemple :</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki vp-code-dark"><code><span class="line"><span style="color:#FF7B72;">struct</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">Position</span><span style="color:#C9D1D9;"> { </span><span style="color:#FF7B72;">float</span><span style="color:#C9D1D9;"> x, y; };</span></span>
<span class="line"><span style="color:#FF7B72;">struct</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">Velocity</span><span style="color:#C9D1D9;"> { </span><span style="color:#FF7B72;">float</span><span style="color:#C9D1D9;"> dx, dy; };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FF7B72;">class</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">MovementSystem</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"><span style="color:#FF7B72;">public:</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">void</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">update</span><span style="color:#C9D1D9;">(</span><span style="color:#FFA657;">Registry</span><span style="color:#FF7B72;">&amp;</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">registry</span><span style="color:#C9D1D9;">) {</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#FF7B72;">for</span><span style="color:#C9D1D9;"> (</span><span style="color:#FF7B72;">auto</span><span style="color:#C9D1D9;"> entity : registry.view</span><span style="color:#FF7B72;">&lt;</span><span style="color:#C9D1D9;">Position, Velocity</span><span style="color:#FF7B72;">&gt;</span><span style="color:#C9D1D9;">()) {</span></span>
<span class="line"><span style="color:#C9D1D9;">            </span><span style="color:#FF7B72;">auto&amp;</span><span style="color:#C9D1D9;"> pos </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> registry.get</span><span style="color:#FF7B72;">&lt;</span><span style="color:#C9D1D9;">Position</span><span style="color:#FF7B72;">&gt;</span><span style="color:#C9D1D9;">(entity);</span></span>
<span class="line"><span style="color:#C9D1D9;">            </span><span style="color:#FF7B72;">auto&amp;</span><span style="color:#C9D1D9;"> vel </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> registry.get</span><span style="color:#FF7B72;">&lt;</span><span style="color:#C9D1D9;">Velocity</span><span style="color:#FF7B72;">&gt;</span><span style="color:#C9D1D9;">(entity);</span></span>
<span class="line"><span style="color:#C9D1D9;">            pos.x </span><span style="color:#FF7B72;">+=</span><span style="color:#C9D1D9;"> vel.dx;</span></span>
<span class="line"><span style="color:#C9D1D9;">            pos.y </span><span style="color:#FF7B72;">+=</span><span style="color:#C9D1D9;"> vel.dy;</span></span>
<span class="line"><span style="color:#C9D1D9;">        }</span></span>
<span class="line"><span style="color:#C9D1D9;">    }</span></span>
<span class="line"><span style="color:#C9D1D9;">};</span></span>
<span class="line"></span></code></pre><pre class="shiki vp-code-light"><code><span class="line"><span style="color:#CF222E;">struct</span><span style="color:#24292F;"> </span><span style="color:#953800;">Position</span><span style="color:#24292F;"> { </span><span style="color:#CF222E;">float</span><span style="color:#24292F;"> x, y; };</span></span>
<span class="line"><span style="color:#CF222E;">struct</span><span style="color:#24292F;"> </span><span style="color:#953800;">Velocity</span><span style="color:#24292F;"> { </span><span style="color:#CF222E;">float</span><span style="color:#24292F;"> dx, dy; };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#CF222E;">class</span><span style="color:#24292F;"> </span><span style="color:#953800;">MovementSystem</span><span style="color:#24292F;"> {</span></span>
<span class="line"><span style="color:#CF222E;">public:</span></span>
<span class="line"><span style="color:#24292F;">    </span><span style="color:#CF222E;">void</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">update</span><span style="color:#24292F;">(</span><span style="color:#953800;">Registry</span><span style="color:#CF222E;">&amp;</span><span style="color:#24292F;"> </span><span style="color:#953800;">registry</span><span style="color:#24292F;">) {</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#CF222E;">for</span><span style="color:#24292F;"> (</span><span style="color:#CF222E;">auto</span><span style="color:#24292F;"> entity : registry.view</span><span style="color:#CF222E;">&lt;</span><span style="color:#24292F;">Position, Velocity</span><span style="color:#CF222E;">&gt;</span><span style="color:#24292F;">()) {</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#CF222E;">auto&amp;</span><span style="color:#24292F;"> pos </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> registry.get</span><span style="color:#CF222E;">&lt;</span><span style="color:#24292F;">Position</span><span style="color:#CF222E;">&gt;</span><span style="color:#24292F;">(entity);</span></span>
<span class="line"><span style="color:#24292F;">            </span><span style="color:#CF222E;">auto&amp;</span><span style="color:#24292F;"> vel </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> registry.get</span><span style="color:#CF222E;">&lt;</span><span style="color:#24292F;">Velocity</span><span style="color:#CF222E;">&gt;</span><span style="color:#24292F;">(entity);</span></span>
<span class="line"><span style="color:#24292F;">            pos.x </span><span style="color:#CF222E;">+=</span><span style="color:#24292F;"> vel.dx;</span></span>
<span class="line"><span style="color:#24292F;">            pos.y </span><span style="color:#CF222E;">+=</span><span style="color:#24292F;"> vel.dy;</span></span>
<span class="line"><span style="color:#24292F;">        }</span></span>
<span class="line"><span style="color:#24292F;">    }</span></span>
<span class="line"><span style="color:#24292F;">};</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>Avantages :</p><ul><li>Architecture flexible : les entit\xE9s sont dynamiques et modulaires.</li><li>D\xE9couplage fort : la logique et les donn\xE9es sont ind\xE9pendantes.</li><li>Favorise la parall\xE9lisation (chaque syst\xE8me peut \xEAtre ex\xE9cut\xE9 sur un thread).</li><li>Id\xE9al pour g\xE9rer des milliers d\u2019entit\xE9s dans un moteur de jeu.</li></ul><p>Inconv\xE9nients :</p><ul><li>Moins intuitif pour les d\xE9butants (abstraction plus conceptuelle).</li><li>Peut n\xE9cessiter une gestion m\xE9moire plus fine.</li><li>La d\xE9bogue et la tra\xE7abilit\xE9 des entit\xE9s sont parfois plus complexes.</li></ul><h2 id="_3-comparaison-directe" tabindex="-1">3. Comparaison directe <a class="header-anchor" href="#_3-comparaison-directe" aria-hidden="true">#</a></h2><h2 id="_3-comparaison-directe-1" tabindex="-1">3. Comparaison directe <a class="header-anchor" href="#_3-comparaison-directe-1" aria-hidden="true">#</a></h2><table><thead><tr><th><strong>Crit\xE8re</strong></th><th><strong>OOP (Programmation Orient\xE9e Objet)</strong></th><th><strong>ECS (Entity Component System)</strong></th></tr></thead><tbody><tr><td><strong>Structure</strong></td><td>Hi\xE9rarchie de classes</td><td>Donn\xE9es + syst\xE8mes s\xE9par\xE9s</td></tr><tr><td><strong>Flexibilit\xE9</strong></td><td>Limit\xE9e par l\u2019h\xE9ritage</td><td>Tr\xE8s \xE9lev\xE9e (composition dynamique)</td></tr><tr><td><strong>Performance</strong></td><td>Souvent limit\xE9e par le polymorphisme</td><td>Optimis\xE9e (cache-friendly, data-oriented)</td></tr><tr><td><strong>R\xE9utilisation du code</strong></td><td>Par h\xE9ritage</td><td>Par composition</td></tr><tr><td><strong>Maintenance</strong></td><td>Hi\xE9rarchie rigide</td><td>Code plus modulaire et isol\xE9</td></tr><tr><td><strong>Extensibilit\xE9</strong></td><td>Difficile sans refactorisation</td><td>Simple : ajouter un nouveau syst\xE8me ou composant</td></tr><tr><td><strong>Adaptation au multithreading</strong></td><td>Complexe</td><td>Naturellement compatible</td></tr><tr><td><strong>Lisibilit\xE9 pour petits projets</strong></td><td>Plus simple</td><td>Plus complexe</td></tr><tr><td><strong>\xC9volutivit\xE9 pour gros projets</strong></td><td>Moins adapt\xE9e</td><td>Tr\xE8s adapt\xE9e</td></tr></tbody></table><h2 id="_4-justification-de-notre-choix-ecs" tabindex="-1">4. Justification de notre choix (ECS) <a class="header-anchor" href="#_4-justification-de-notre-choix-ecs" aria-hidden="true">#</a></h2><p>Nous avons choisi ECS pour notre moteur 2D car il r\xE9pond mieux \xE0 nos objectifs de performance, de modularit\xE9 et d\u2019\xE9volutivit\xE9 : Performance : la s\xE9paration des donn\xE9es permet un acc\xE8s s\xE9quentiel en m\xE9moire (data-oriented design), id\xE9al pour les mises \xE0 jour massives d\u2019entit\xE9s (ex. : projectiles, ennemis, particules).</p><ul><li><strong>Modularit\xE9</strong> : chaque syst\xE8me (Input, Render, Physics, Collision, etc.) peut \xEAtre d\xE9velopp\xE9 ind\xE9pendamment.</li><li><strong>Flexibilit\xE9</strong> : ajout ou suppression de composants \xE0 une entit\xE9 \xE0 l\u2019ex\xE9cution sans refactoriser les classes.</li><li><strong>\xC9volutivit\xE9</strong> : facile d\u2019int\xE9grer de nouveaux syst\xE8mes sans impacter la structure existante.</li><li><strong>Parall\xE9lisation</strong> : permet de tirer parti des architectures multi-thread\xE9es modernes.</li></ul><h2 id="_5-conclusion" tabindex="-1">5. Conclusion <a class="header-anchor" href="#_5-conclusion" aria-hidden="true">#</a></h2><p>L\u2019ECS repr\xE9sente une \xE9volution naturelle de la conception orient\xE9e objet pour les moteurs de jeux. Alors que l\u2019OOP met l\u2019accent sur la hi\xE9rarchie et l\u2019encapsulation, l\u2019ECS privil\xE9gie la composition et la performance.</p><p>Notre choix d\u2019utiliser ECS s\u2019explique donc par :</p><ul><li>la recherche d\u2019un moteur modulaire, \xE9volutif et performant,</li><li>une meilleure gestion des entit\xE9s dynamiques et une architecture claire pour s\xE9parer la logique du contenu.</li></ul>`,32),l=[o];function p(r,i,c,d,u,y){return e(),n("div",null,l)}const g=s(t,[["render",p]]);export{F as __pageData,g as default};
