import{_ as e,c as t,o as r,a as o}from"./app.e92fff24.js";const m=JSON.parse('{"title":"The First Part of R-type","description":"","frontmatter":{},"headers":[{"level":2,"title":"Projet Overview","slug":"projet-overview","link":"#projet-overview","children":[]},{"level":2,"title":"Project Structure","slug":"project-structure","link":"#project-structure","children":[]},{"level":2,"title":"Technologies & Tools","slug":"technologies-tools","link":"#technologies-tools","children":[]}],"relativePath":"R-type_Part1/index.md"}'),a={name:"R-type_Part1/index.md"},n=o('<h1 id="the-first-part-of-r-type" tabindex="-1">The First Part of R-type <a class="header-anchor" href="#the-first-part-of-r-type" aria-hidden="true">#</a></h1><h1 id="r-type-\u2014-a-game-engine-that-roars" tabindex="-1">R-Type \u2014 A Game Engine That Roars! <a class="header-anchor" href="#r-type-\u2014-a-game-engine-that-roars" aria-hidden="true">#</a></h1><h2 id="projet-overview" tabindex="-1">Projet Overview <a class="header-anchor" href="#projet-overview" aria-hidden="true">#</a></h2><p><strong>R-Type</strong> is a C++ networked video game project inspired by the classic 90\u2019s shoot\u2019em\u2019up.<br> The goal of this project is to design and implement:</p><ul><li>a <strong>multi-threaded server</strong> managing all game logic, and</li><li>a <strong>graphical client</strong> rendering the game world and handling player input.</li></ul><p>Beyond recreating the original R-Type gameplay, this project emphasizes <strong>software architecture</strong>, <strong>networking</strong>, and <strong>game engine design</strong>, using modern C++ practices.</p><hr><h2 id="project-structure" tabindex="-1">Project Structure <a class="header-anchor" href="#project-structure" aria-hidden="true">#</a></h2><ul><li><strong>Server</strong> (<code>r-type_server</code>) \u2014 authoritative game logic and networking.</li><li><strong>Client</strong> (<code>r-type_client</code>) \u2014 rendering, input, and local player control.</li><li><strong>Game Engine Core</strong> \u2014 reusable architecture including systems for: <ul><li>Rendering</li><li>Networking (UDP-based)</li><li>Game Logic</li><li>Entity-Component-System (ECS) architecture</li></ul></li></ul><hr><h2 id="technologies-tools" tabindex="-1">Technologies &amp; Tools <a class="header-anchor" href="#technologies-tools" aria-hidden="true">#</a></h2><table><thead><tr><th>Component</th><th>Technology</th></tr></thead><tbody><tr><td>Language</td><td>C++</td></tr><tr><td>Build System</td><td>CMake</td></tr><tr><td>Package Manager</td><td>Conan</td></tr><tr><td>Rendering &amp; Input</td><td>SFML</td></tr><tr><td>Networking</td><td>Asio</td></tr><tr><td>Documentation</td><td>Markdown / Vitpress</td></tr><tr><td>OS Support</td><td>Linux (mandatory), Windows (recommended)</td></tr></tbody></table><hr>',13),i=[n];function d(s,l,c,h,g,p){return r(),t("div",null,i)}const _=e(a,[["render",d]]);export{m as __pageData,_ as default};
