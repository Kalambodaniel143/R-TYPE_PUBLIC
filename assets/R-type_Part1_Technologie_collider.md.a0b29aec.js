import{_ as s,c as n,o as a,a as e}from"./app.419fa203.js";const m=JSON.parse('{"title":"\xC9tude sur l\u2019utilisation de l\u2019AABB dans le moteur ECS","description":"","frontmatter":{},"headers":[{"level":2,"title":"1. Introduction","slug":"_1-introduction","link":"#_1-introduction","children":[]},{"level":2,"title":"2. Principe de l\u2019AABB","slug":"_2-principe-de-l-aabb","link":"#_2-principe-de-l-aabb","children":[{"level":3,"title":"Exemple simplifi\xE9","slug":"exemple-simplifie","link":"#exemple-simplifie","children":[]}]}],"relativePath":"R-type_Part1/Technologie/collider.md"}'),l={name:"R-type_Part1/Technologie/collider.md"},p=e(`<h1 id="etude-sur-l-utilisation-de-l-aabb-dans-le-moteur-ecs" tabindex="-1">\xC9tude sur l\u2019utilisation de l\u2019AABB dans le moteur ECS <a class="header-anchor" href="#etude-sur-l-utilisation-de-l-aabb-dans-le-moteur-ecs" aria-hidden="true">#</a></h1><h2 id="_1-introduction" tabindex="-1">1. Introduction <a class="header-anchor" href="#_1-introduction" aria-hidden="true">#</a></h2><p>Dans notre moteur de jeu 2D bas\xE9 sur l\u2019architecture <strong>ECS (Entity Component System)</strong>, nous avons choisi d\u2019utiliser le syst\xE8me <strong>AABB (Axis-Aligned Bounding Box)</strong> pour la gestion des collisions.<br> Ce choix s\u2019explique par la <strong>simplicit\xE9</strong>, la <strong>rapidit\xE9</strong> et la <strong>faible charge de calcul</strong> de cette m\xE9thode, parfaitement adapt\xE9e \xE0 un moteur orient\xE9 performance et modularit\xE9.</p><hr><h2 id="_2-principe-de-l-aabb" tabindex="-1">2. Principe de l\u2019AABB <a class="header-anchor" href="#_2-principe-de-l-aabb" aria-hidden="true">#</a></h2><p>Le syst\xE8me <strong>AABB</strong> repose sur l\u2019utilisation d\u2019un <strong>rectangle englobant align\xE9 sur les axes du jeu (X et Y)</strong>.<br> Chaque entit\xE9 disposant d\u2019un composant de collision poss\xE8de ainsi une bo\xEEte d\xE9finie par sa position et ses dimensions.</p><p>La d\xE9tection de collision consiste simplement \xE0 v\xE9rifier si <strong>deux rectangles se croisent</strong>, ce qui en fait une m\xE9thode tr\xE8s rapide \xE0 ex\xE9cuter.</p><h3 id="exemple-simplifie" tabindex="-1">Exemple simplifi\xE9 <a class="header-anchor" href="#exemple-simplifie" aria-hidden="true">#</a></h3><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki vp-code-dark"><code><span class="line"><span style="color:#FF7B72;">bool</span><span style="color:#C9D1D9;"> </span><span style="color:#D2A8FF;">intersects</span><span style="color:#C9D1D9;">(</span><span style="color:#FF7B72;">const</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">AABB</span><span style="color:#FF7B72;">&amp;</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">a</span><span style="color:#C9D1D9;">, </span><span style="color:#FF7B72;">const</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">AABB</span><span style="color:#FF7B72;">&amp;</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">b</span><span style="color:#C9D1D9;">) {</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">return</span><span style="color:#C9D1D9;"> (a.x </span><span style="color:#FF7B72;">&lt;</span><span style="color:#C9D1D9;"> b.x </span><span style="color:#FF7B72;">+</span><span style="color:#C9D1D9;"> b.width  </span><span style="color:#FF7B72;">&amp;&amp;</span></span>
<span class="line"><span style="color:#C9D1D9;">            a.x </span><span style="color:#FF7B72;">+</span><span style="color:#C9D1D9;"> a.width </span><span style="color:#FF7B72;">&gt;</span><span style="color:#C9D1D9;"> b.x  </span><span style="color:#FF7B72;">&amp;&amp;</span></span>
<span class="line"><span style="color:#C9D1D9;">            a.y </span><span style="color:#FF7B72;">&lt;</span><span style="color:#C9D1D9;"> b.y </span><span style="color:#FF7B72;">+</span><span style="color:#C9D1D9;"> b.height </span><span style="color:#FF7B72;">&amp;&amp;</span></span>
<span class="line"><span style="color:#C9D1D9;">            a.y </span><span style="color:#FF7B72;">+</span><span style="color:#C9D1D9;"> a.height </span><span style="color:#FF7B72;">&gt;</span><span style="color:#C9D1D9;"> b.y);</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><pre class="shiki vp-code-light"><code><span class="line"><span style="color:#CF222E;">bool</span><span style="color:#24292F;"> </span><span style="color:#8250DF;">intersects</span><span style="color:#24292F;">(</span><span style="color:#CF222E;">const</span><span style="color:#24292F;"> </span><span style="color:#953800;">AABB</span><span style="color:#CF222E;">&amp;</span><span style="color:#24292F;"> </span><span style="color:#953800;">a</span><span style="color:#24292F;">, </span><span style="color:#CF222E;">const</span><span style="color:#24292F;"> </span><span style="color:#953800;">AABB</span><span style="color:#CF222E;">&amp;</span><span style="color:#24292F;"> </span><span style="color:#953800;">b</span><span style="color:#24292F;">) {</span></span>
<span class="line"><span style="color:#24292F;">    </span><span style="color:#CF222E;">return</span><span style="color:#24292F;"> (a.x </span><span style="color:#CF222E;">&lt;</span><span style="color:#24292F;"> b.x </span><span style="color:#CF222E;">+</span><span style="color:#24292F;"> b.width  </span><span style="color:#CF222E;">&amp;&amp;</span></span>
<span class="line"><span style="color:#24292F;">            a.x </span><span style="color:#CF222E;">+</span><span style="color:#24292F;"> a.width </span><span style="color:#CF222E;">&gt;</span><span style="color:#24292F;"> b.x  </span><span style="color:#CF222E;">&amp;&amp;</span></span>
<span class="line"><span style="color:#24292F;">            a.y </span><span style="color:#CF222E;">&lt;</span><span style="color:#24292F;"> b.y </span><span style="color:#CF222E;">+</span><span style="color:#24292F;"> b.height </span><span style="color:#CF222E;">&amp;&amp;</span></span>
<span class="line"><span style="color:#24292F;">            a.y </span><span style="color:#CF222E;">+</span><span style="color:#24292F;"> a.height </span><span style="color:#CF222E;">&gt;</span><span style="color:#24292F;"> b.y);</span></span>
<span class="line"><span style="color:#24292F;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div>`,9),o=[p];function t(r,c,i,y,d,F){return a(),n("div",null,o)}const h=s(l,[["render",t]]);export{m as __pageData,h as default};
