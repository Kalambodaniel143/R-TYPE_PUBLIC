import{_ as e,c as n,o as a,b as s,d as l,a as o}from"./app.7b93c3fb.js";const _=JSON.parse('{"title":"\xC9tude comparative: View ECS vs parcours direct du Registry Et revue de la d\xE9finition des composants physiques et du PhysicsSystem","description":"","frontmatter":{},"headers":[{"level":2,"title":"1) View vs parcours direct du Registry","slug":"_1-view-vs-parcours-direct-du-registry","link":"#_1-view-vs-parcours-direct-du-registry","children":[{"level":3,"title":"1.1 Objectif et ergonomie","slug":"_1-1-objectif-et-ergonomie","link":"#_1-1-objectif-et-ergonomie","children":[]},{"level":3,"title":"1.2 Complexit\xE9 et co\xFBts constants","slug":"_1-2-complexite-et-couts-constants","link":"#_1-2-complexite-et-couts-constants","children":[]},{"level":3,"title":"1.3 Localit\xE9 m\xE9moire et pr\xE9diction de branche","slug":"_1-3-localite-memoire-et-prediction-de-branche","link":"#_1-3-localite-memoire-et-prediction-de-branche","children":[]},{"level":3,"title":"1.4 S\xE9curit\xE9 et maintenabilit\xE9","slug":"_1-4-securite-et-maintenabilite","link":"#_1-4-securite-et-maintenabilite","children":[]},{"level":3,"title":"1.5 Concurrence et parall\xE9lisation","slug":"_1-5-concurrence-et-parallelisation","link":"#_1-5-concurrence-et-parallelisation","children":[]},{"level":3,"title":"1.6 Cas o\xF9 le parcours direct reste acceptable","slug":"_1-6-cas-ou-le-parcours-direct-reste-acceptable","link":"#_1-6-cas-ou-le-parcours-direct-reste-acceptable","children":[]},{"level":3,"title":"1.7 Recommandations","slug":"_1-7-recommandations","link":"#_1-7-recommandations","children":[]}]},{"level":2,"title":"2) Comparaison synth\xE9tique: view vs parcours direct pour PhysicsSystem","slug":"_2-comparaison-synthetique-view-vs-parcours-direct-pour-physicssystem","link":"#_2-comparaison-synthetique-view-vs-parcours-direct-pour-physicssystem","children":[]},{"level":2,"title":"3) Quand pr\xE9f\xE9rer le parcours direct","slug":"_3-quand-preferer-le-parcours-direct","link":"#_3-quand-preferer-le-parcours-direct","children":[]}],"relativePath":"R-type_Part1/Technologie/view.md"}'),p={name:"R-type_Part1/Technologie/view.md"},t=s("h1",{id:"etude-comparative-view-ecs-vs-parcours-direct-du-registry-et-revue-de-la-definition-des-composants-physiques-et-du-physicssystem",tabindex:"-1"},[l("\xC9tude comparative: View ECS vs parcours direct du Registry Et revue de la d\xE9finition des composants physiques et du PhysicsSystem "),s("a",{class:"header-anchor",href:"#etude-comparative-view-ecs-vs-parcours-direct-du-registry-et-revue-de-la-definition-des-composants-physiques-et-du-physicssystem","aria-hidden":"true"},"#")],-1),r=s("p",null,"R\xE9sum\xE9:",-1),i=s("ul",null,[s("li",null,"view<...> filtre au compile-time et it\xE8re uniquement sur les entit\xE9s qui poss\xE8dent tous les composants requis."),s("li",null,"Le parcours direct du registry impose soit de v\xE9rifier dynamiquement la pr\xE9sence des composants (if/has), soit d\u2019it\xE9rer plusieurs conteneurs et de les croiser manuellement.")],-1),c=s("p",null,"Cette note se base sur les fichiers:",-1),u=s("ul",null,[s("li",null,"View: GameEngine/Registry/View.hpp"),s("li",{"hpp,cpp":""},"PhysicsSystem: GameEngine/Physics/Systems/PhysicsSystem."),s("li",{"Movement.hpp,":"","Physics.hpp":""},"Composants: GameEngine/Physics/Components/")],-1),d=o(`<hr><h2 id="_1-view-vs-parcours-direct-du-registry" tabindex="-1">1) View vs parcours direct du Registry <a class="header-anchor" href="#_1-view-vs-parcours-direct-du-registry" aria-hidden="true">#</a></h2><h3 id="_1-1-objectif-et-ergonomie" tabindex="-1">1.1 Objectif et ergonomie <a class="header-anchor" href="#_1-1-objectif-et-ergonomie" aria-hidden="true">#</a></h3><ul><li>view&lt;Components...&gt;: <ul><li>D\xE9clare au compile-time l\u2019ensemble de composants attendus.</li><li>Fournit une boucle claire: for (auto e : view&lt;...&gt;(reg)) { ... }.</li><li>Minimise le bruit de code (pas de if (!has) return;).</li></ul></li><li>Parcours direct: <ul><li>Implique souvent des tests dynamiques de pr\xE9sence des composants.</li><li>Plus verbeux et sujet \xE0 l\u2019oubli de checks.</li></ul></li></ul><p>Exemple c\xF4t\xE9-\xE0-c\xF4t\xE9:</p><p>Cas simple: int\xE9grer la vitesse dans la position.</p><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki vp-code-dark"><code><span class="line"><span style="color:#8B949E;">// Avec view</span></span>
<span class="line"><span style="color:#FF7B72;">for</span><span style="color:#C9D1D9;"> (</span><span style="color:#FF7B72;">auto</span><span style="color:#C9D1D9;"> e : </span><span style="color:#D2A8FF;">view</span><span style="color:#C9D1D9;">&lt;</span><span style="color:#FFA657;">PositionComponent</span><span style="color:#C9D1D9;">, </span><span style="color:#FFA657;">VelocityComponent</span><span style="color:#C9D1D9;">&gt;(reg)) {</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">auto&amp;</span><span style="color:#C9D1D9;"> pos </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> reg.get_components</span><span style="color:#FF7B72;">&lt;</span><span style="color:#C9D1D9;">PositionComponent</span><span style="color:#FF7B72;">&gt;</span><span style="color:#C9D1D9;">()[e];</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">auto&amp;</span><span style="color:#C9D1D9;"> vel </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> reg.get_components</span><span style="color:#FF7B72;">&lt;</span><span style="color:#C9D1D9;">VelocityComponent</span><span style="color:#FF7B72;">&gt;</span><span style="color:#C9D1D9;">()[e];</span></span>
<span class="line"><span style="color:#C9D1D9;">    pos.x </span><span style="color:#FF7B72;">+=</span><span style="color:#C9D1D9;"> vel.vx </span><span style="color:#FF7B72;">*</span><span style="color:#C9D1D9;"> dt;</span></span>
<span class="line"><span style="color:#C9D1D9;">    pos.y </span><span style="color:#FF7B72;">+=</span><span style="color:#C9D1D9;"> vel.vy </span><span style="color:#FF7B72;">*</span><span style="color:#C9D1D9;"> dt;</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><pre class="shiki vp-code-light"><code><span class="line"><span style="color:#6E7781;">// Avec view</span></span>
<span class="line"><span style="color:#CF222E;">for</span><span style="color:#24292F;"> (</span><span style="color:#CF222E;">auto</span><span style="color:#24292F;"> e : </span><span style="color:#8250DF;">view</span><span style="color:#24292F;">&lt;</span><span style="color:#953800;">PositionComponent</span><span style="color:#24292F;">, </span><span style="color:#953800;">VelocityComponent</span><span style="color:#24292F;">&gt;(reg)) {</span></span>
<span class="line"><span style="color:#24292F;">    </span><span style="color:#CF222E;">auto&amp;</span><span style="color:#24292F;"> pos </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> reg.get_components</span><span style="color:#CF222E;">&lt;</span><span style="color:#24292F;">PositionComponent</span><span style="color:#CF222E;">&gt;</span><span style="color:#24292F;">()[e];</span></span>
<span class="line"><span style="color:#24292F;">    </span><span style="color:#CF222E;">auto&amp;</span><span style="color:#24292F;"> vel </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> reg.get_components</span><span style="color:#CF222E;">&lt;</span><span style="color:#24292F;">VelocityComponent</span><span style="color:#CF222E;">&gt;</span><span style="color:#24292F;">()[e];</span></span>
<span class="line"><span style="color:#24292F;">    pos.x </span><span style="color:#CF222E;">+=</span><span style="color:#24292F;"> vel.vx </span><span style="color:#CF222E;">*</span><span style="color:#24292F;"> dt;</span></span>
<span class="line"><span style="color:#24292F;">    pos.y </span><span style="color:#CF222E;">+=</span><span style="color:#24292F;"> vel.vy </span><span style="color:#CF222E;">*</span><span style="color:#24292F;"> dt;</span></span>
<span class="line"><span style="color:#24292F;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki vp-code-dark"><code><span class="line"><span style="color:#8B949E;">// Parcours direct (ex: sur toutes les entit\xE9s)</span></span>
<span class="line"><span style="color:#FF7B72;">for</span><span style="color:#C9D1D9;"> (</span><span style="color:#79C0FF;">entity_t</span><span style="color:#C9D1D9;"> e </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">0</span><span style="color:#C9D1D9;">; e </span><span style="color:#FF7B72;">&lt;</span><span style="color:#C9D1D9;"> reg.</span><span style="color:#D2A8FF;">size</span><span style="color:#C9D1D9;">(); </span><span style="color:#FF7B72;">++</span><span style="color:#C9D1D9;">e) {</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">auto&amp;</span><span style="color:#C9D1D9;"> posArr </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> reg.get_components</span><span style="color:#FF7B72;">&lt;</span><span style="color:#C9D1D9;">PositionComponent</span><span style="color:#FF7B72;">&gt;</span><span style="color:#C9D1D9;">();</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">auto&amp;</span><span style="color:#C9D1D9;"> velArr </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> reg.get_components</span><span style="color:#FF7B72;">&lt;</span><span style="color:#C9D1D9;">VelocityComponent</span><span style="color:#FF7B72;">&gt;</span><span style="color:#C9D1D9;">();</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">if</span><span style="color:#C9D1D9;"> (</span><span style="color:#FF7B72;">!</span><span style="color:#C9D1D9;">posArr.</span><span style="color:#D2A8FF;">has</span><span style="color:#C9D1D9;">(e) </span><span style="color:#FF7B72;">||</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">!</span><span style="color:#C9D1D9;">velArr.</span><span style="color:#D2A8FF;">has</span><span style="color:#C9D1D9;">(e))</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#FF7B72;">continue</span><span style="color:#C9D1D9;">;</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">auto&amp;</span><span style="color:#C9D1D9;"> pos </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> posArr[e];</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">auto&amp;</span><span style="color:#C9D1D9;"> vel </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> velArr[e];</span></span>
<span class="line"><span style="color:#C9D1D9;">    pos.x </span><span style="color:#FF7B72;">+=</span><span style="color:#C9D1D9;"> vel.vx </span><span style="color:#FF7B72;">*</span><span style="color:#C9D1D9;"> dt;</span></span>
<span class="line"><span style="color:#C9D1D9;">    pos.y </span><span style="color:#FF7B72;">+=</span><span style="color:#C9D1D9;"> vel.vy </span><span style="color:#FF7B72;">*</span><span style="color:#C9D1D9;"> dt;</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><pre class="shiki vp-code-light"><code><span class="line"><span style="color:#6E7781;">// Parcours direct (ex: sur toutes les entit\xE9s)</span></span>
<span class="line"><span style="color:#CF222E;">for</span><span style="color:#24292F;"> (</span><span style="color:#0550AE;">entity_t</span><span style="color:#24292F;"> e </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> </span><span style="color:#0550AE;">0</span><span style="color:#24292F;">; e </span><span style="color:#CF222E;">&lt;</span><span style="color:#24292F;"> reg.</span><span style="color:#8250DF;">size</span><span style="color:#24292F;">(); </span><span style="color:#CF222E;">++</span><span style="color:#24292F;">e) {</span></span>
<span class="line"><span style="color:#24292F;">    </span><span style="color:#CF222E;">auto&amp;</span><span style="color:#24292F;"> posArr </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> reg.get_components</span><span style="color:#CF222E;">&lt;</span><span style="color:#24292F;">PositionComponent</span><span style="color:#CF222E;">&gt;</span><span style="color:#24292F;">();</span></span>
<span class="line"><span style="color:#24292F;">    </span><span style="color:#CF222E;">auto&amp;</span><span style="color:#24292F;"> velArr </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> reg.get_components</span><span style="color:#CF222E;">&lt;</span><span style="color:#24292F;">VelocityComponent</span><span style="color:#CF222E;">&gt;</span><span style="color:#24292F;">();</span></span>
<span class="line"><span style="color:#24292F;">    </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (</span><span style="color:#CF222E;">!</span><span style="color:#24292F;">posArr.</span><span style="color:#8250DF;">has</span><span style="color:#24292F;">(e) </span><span style="color:#CF222E;">||</span><span style="color:#24292F;"> </span><span style="color:#CF222E;">!</span><span style="color:#24292F;">velArr.</span><span style="color:#8250DF;">has</span><span style="color:#24292F;">(e))</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#CF222E;">continue</span><span style="color:#24292F;">;</span></span>
<span class="line"><span style="color:#24292F;">    </span><span style="color:#CF222E;">auto&amp;</span><span style="color:#24292F;"> pos </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> posArr[e];</span></span>
<span class="line"><span style="color:#24292F;">    </span><span style="color:#CF222E;">auto&amp;</span><span style="color:#24292F;"> vel </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> velArr[e];</span></span>
<span class="line"><span style="color:#24292F;">    pos.x </span><span style="color:#CF222E;">+=</span><span style="color:#24292F;"> vel.vx </span><span style="color:#CF222E;">*</span><span style="color:#24292F;"> dt;</span></span>
<span class="line"><span style="color:#24292F;">    pos.y </span><span style="color:#CF222E;">+=</span><span style="color:#24292F;"> vel.vy </span><span style="color:#CF222E;">*</span><span style="color:#24292F;"> dt;</span></span>
<span class="line"><span style="color:#24292F;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="_1-2-complexite-et-couts-constants" tabindex="-1">1.2 Complexit\xE9 et co\xFBts constants <a class="header-anchor" href="#_1-2-complexite-et-couts-constants" aria-hidden="true">#</a></h3><ul><li>Les deux approches sont O(N) au pire (N = nombre d\u2019entit\xE9s).</li><li>view peut r\xE9duire la constante: <ul><li>It\xE8re sur l\u2019ensemble \xAB le plus petit \xBB (selon impl\xE9mentation possible) ou saute efficacement les entit\xE9s non \xE9ligibles.</li><li>Moins de branches conditionnelles dans la boucle si le filtrage est fait dans l\u2019it\xE9rateur.</li></ul></li><li>Parcours direct: <ul><li>Effectue des checks has(...) \xE0 chaque entit\xE9 et pour chaque composant requis.</li><li>Potentiellement plus de branches et de cache-misses.</li></ul></li></ul><p>Conclusion: sur un grand N avec des entit\xE9s h\xE9t\xE9rog\xE8nes, view est souvent plus rapide et plus stable.</p><h3 id="_1-3-localite-memoire-et-prediction-de-branche" tabindex="-1">1.3 Localit\xE9 m\xE9moire et pr\xE9diction de branche <a class="header-anchor" href="#_1-3-localite-memoire-et-prediction-de-branche" aria-hidden="true">#</a></h3><ul><li>view peut: <ul><li>Partir d\u2019un composant pivot dense/compact pour it\xE9rer.</li><li>R\xE9duire les sauts et favoriser la lecture contigu\xEB de donn\xE9es.</li></ul></li><li>Parcours direct: <ul><li>Parcours s\xE9quentiel de l\u2019espace d\u2019ID, mais acc\xE8de de fa\xE7on \xE9parse aux sparse_array, causant des misses.</li></ul></li></ul><h3 id="_1-4-securite-et-maintenabilite" tabindex="-1">1.4 S\xE9curit\xE9 et maintenabilit\xE9 <a class="header-anchor" href="#_1-4-securite-et-maintenabilite" aria-hidden="true">#</a></h3><ul><li>view: <ul><li>API claire: les composants requis sont explicites dans le template.</li><li>Moins d\u2019erreurs d\u2019oubli de v\xE9rification de composant.</li></ul></li><li>Parcours direct: <ul><li>Risque de regression si un check est oubli\xE9 ou mal ordonn\xE9.</li></ul></li></ul><h3 id="_1-5-concurrence-et-parallelisation" tabindex="-1">1.5 Concurrence et parall\xE9lisation <a class="header-anchor" href="#_1-5-concurrence-et-parallelisation" aria-hidden="true">#</a></h3><ul><li>view: <ul><li>Facile \xE0 chunker: on peut partitionner l\u2019it\xE9ration en jobs sans tester les has(...) dans chaque job.</li><li>Pratique pour un scheduler (worker threads).</li></ul></li><li>Parcours direct: <ul><li>Parall\xE9lisation possible mais plus de bruit et de contr\xF4les \xE0 dupliquer.</li></ul></li></ul><h3 id="_1-6-cas-ou-le-parcours-direct-reste-acceptable" tabindex="-1">1.6 Cas o\xF9 le parcours direct reste acceptable <a class="header-anchor" href="#_1-6-cas-ou-le-parcours-direct-reste-acceptable" aria-hidden="true">#</a></h3><ul><li>Petits N ou boucles tr\xE8s ponctuelles (scripts/outils).</li><li>Op\xE9rations sur un seul type de composant sans conjonction (ex: initialiser toutes les vitesses pr\xE9sentes).</li><li>Prototypes rapides o\xF9 la lisibilit\xE9 prime sur la perf imm\xE9diate.</li></ul><h3 id="_1-7-recommandations" tabindex="-1">1.7 Recommandations <a class="header-anchor" href="#_1-7-recommandations" aria-hidden="true">#</a></h3><ul><li>Utiliser view pour toutes les boucles de runtime o\xF9 la conjonction de composants est connue et stable (ex: Physics, Render, AI).</li><li>Garder le parcours direct pour outillage, debug, ou mutations globales non critiques en perfs.</li></ul><hr><h2 id="_2-comparaison-synthetique-view-vs-parcours-direct-pour-physicssystem" tabindex="-1">2) Comparaison synth\xE9tique: view vs parcours direct pour PhysicsSystem <a class="header-anchor" href="#_2-comparaison-synthetique-view-vs-parcours-direct-pour-physicssystem" aria-hidden="true">#</a></h2><ul><li>Performance: <ul><li>view: meilleure densit\xE9 de donn\xE9es, moins de branches, tr\xE8s bon en grand N.</li><li>direct: suffisant en petit N, d\xE9grade sur entit\xE9s h\xE9t\xE9rog\xE8nes.</li></ul></li><li>Clart\xE9: <ul><li>view: intentions explicites (quels composants), code concis.</li><li>direct: checks repetitifs, plus de bruit.</li></ul></li><li>Maintenance: <ul><li>view: plus difficile d\u2019introduire des oublis de composant.</li><li>direct: fragile lors d\u2019\xE9volutions (ajout d\u2019un nouveau composant requis).</li></ul></li><li>Testabilit\xE9: <ul><li>view: facile \xE0 mocker/it\xE9rer dans des tests.</li><li>direct: tests plus verbeux.</li></ul></li></ul><p>Conclusion: adopter view par d\xE9faut dans PhysicsSystem.</p><hr><h2 id="_3-quand-preferer-le-parcours-direct" tabindex="-1">3) Quand pr\xE9f\xE9rer le parcours direct <a class="header-anchor" href="#_3-quand-preferer-le-parcours-direct" aria-hidden="true">#</a></h2><ul><li>Outils/scripts d\u2019\xE9dition ou migration de donn\xE9es.</li><li>Op\xE9rations globales \xAB best effort \xBB effectu\xE9es rarement (ex: reset de tout un conteneur).</li><li>Debug ponctuel o\xF9 la perf est n\xE9gligeable.</li></ul><p>Pour tout le runtime de jeu (physics, render, AI), privil\xE9gier view pour un meilleur ratio lisibilit\xE9/performance/maintenance.</p>`,29),y=[t,r,i,c,u,d];function F(m,h,C,D,v,b){return a(),n("div",null,y)}const f=e(p,[["render",F]]);export{_ as __pageData,f as default};
