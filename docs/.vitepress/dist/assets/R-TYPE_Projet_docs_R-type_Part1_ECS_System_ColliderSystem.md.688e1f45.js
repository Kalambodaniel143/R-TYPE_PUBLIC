import{_ as s,c as n,o as a,a as e}from"./app.ab183e9a.js";const C=JSON.parse('{"title":"SYSTEME DE COLLISION","description":"","frontmatter":{},"headers":[{"level":2,"title":"1. Fonction de d\xE9tection de collision AABB","slug":"_1-fonction-de-detection-de-collision-aabb","link":"#_1-fonction-de-detection-de-collision-aabb","children":[]},{"level":2,"title":"\u{1F50D} Algorithme AABB (Axis-Aligned Bounding Box)","slug":"\u{1F50D}-algorithme-aabb-axis-aligned-bounding-box","link":"#\u{1F50D}-algorithme-aabb-axis-aligned-bounding-box","children":[]},{"level":2,"title":"Une Petite Visualisation de ce Systeme:","slug":"une-petite-visualisation-de-ce-systeme","link":"#une-petite-visualisation-de-ce-systeme","children":[{"level":3,"title":"\xC9tape 1 : R\xE9cup\xE9ration des composants","slug":"etape-1-recuperation-des-composants","link":"#etape-1-recuperation-des-composants","children":[]},{"level":3,"title":"\xC9tape 2 : Cr\xE9ation de la vue ECS","slug":"etape-2-creation-de-la-vue-ecs","link":"#etape-2-creation-de-la-vue-ecs","children":[]},{"level":3,"title":"\xC9tape 3 : Double boucle de d\xE9tection","slug":"etape-3-double-boucle-de-detection","link":"#etape-3-double-boucle-de-detection","children":[]},{"level":3,"title":"Logique :","slug":"logique","link":"#logique","children":[]}]},{"level":2,"title":"Ce systeme permet de :","slug":"ce-systeme-permet-de","link":"#ce-systeme-permet-de","children":[]}],"relativePath":"R-TYPE_Projet/docs/R-type_Part1/ECS/System/ColliderSystem.md"}'),l={name:"R-TYPE_Projet/docs/R-type_Part1/ECS/System/ColliderSystem.md"},o=e(`<h1 id="systeme-de-collision" tabindex="-1">SYSTEME DE COLLISION <a class="header-anchor" href="#systeme-de-collision" aria-hidden="true">#</a></h1><p>Ce syst\xE8me impl\xE9mente la d\xE9tection de collision avec gestion des d\xE9g\xE2ts dans notre moteur ECS. Voici comment il fonctionne :</p><p>Tout commencer par la fonction qui nous permet de d\xE9tecter la collision avec l&#39;algorithme AABB</p><h2 id="_1-fonction-de-detection-de-collision-aabb" tabindex="-1">1. Fonction de d\xE9tection de collision AABB <a class="header-anchor" href="#_1-fonction-de-detection-de-collision-aabb" aria-hidden="true">#</a></h2><p>La fonction de d\xE9tection de collision AABB (Axis-Aligned Bounding Box) d\xE9termine si des objets se chevauchent en v\xE9rifiant si leurs bo\xEEtes englobantes align\xE9es sur les axes se croisent. Elle fonctionne en testant le chevauchement sur chaque axe (X et Y en 2D, X, Y et Z en 3D) ; une collision n&#39;est d\xE9tect\xE9e que si le chevauchement existe sur tous les axes. C&#39;est une m\xE9thode simple et rapide, tr\xE8s utilis\xE9e dans les jeux vid\xE9o pour des objets non tournants ce qui est pratique pour notre moteur de jeu</p><hr><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki vp-code-dark"><code><span class="line"><span style="color:#FF7B72;">bool</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">CollideSystem</span><span style="color:#C9D1D9;">::</span><span style="color:#D2A8FF;">checkCollision</span><span style="color:#C9D1D9;">(</span><span style="color:#FFA657;">PositionComponent</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">aPos</span><span style="color:#C9D1D9;">, </span><span style="color:#FFA657;">ColliderComponent</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">aCol</span><span style="color:#C9D1D9;">, </span><span style="color:#FFA657;">PositionComponent</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">bPos</span><span style="color:#C9D1D9;">, </span><span style="color:#FFA657;">ColliderComponent</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">bCol</span><span style="color:#C9D1D9;">) {</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">return</span><span style="color:#C9D1D9;"> (aPos.x </span><span style="color:#FF7B72;">&lt;</span><span style="color:#C9D1D9;"> bPos.x </span><span style="color:#FF7B72;">+</span><span style="color:#C9D1D9;"> bCol.width </span><span style="color:#FF7B72;">&amp;&amp;</span><span style="color:#8B949E;">      // A \xE0 gauche de B</span></span>
<span class="line"><span style="color:#C9D1D9;">            aPos.x </span><span style="color:#FF7B72;">+</span><span style="color:#C9D1D9;"> aCol.width </span><span style="color:#FF7B72;">&gt;</span><span style="color:#C9D1D9;"> bPos.x </span><span style="color:#FF7B72;">&amp;&amp;</span><span style="color:#8B949E;">      // A \xE0 droite de B  </span></span>
<span class="line"><span style="color:#C9D1D9;">            aPos.y </span><span style="color:#FF7B72;">&lt;</span><span style="color:#C9D1D9;"> bPos.y </span><span style="color:#FF7B72;">+</span><span style="color:#C9D1D9;"> bCol.height </span><span style="color:#FF7B72;">&amp;&amp;</span><span style="color:#8B949E;">     // A au-dessus de B</span></span>
<span class="line"><span style="color:#C9D1D9;">            aPos.y </span><span style="color:#FF7B72;">+</span><span style="color:#C9D1D9;"> aCol.height </span><span style="color:#FF7B72;">&gt;</span><span style="color:#C9D1D9;"> bPos.y);</span><span style="color:#8B949E;">      // A en-dessous de B</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><pre class="shiki vp-code-light"><code><span class="line"><span style="color:#CF222E;">bool</span><span style="color:#24292F;"> </span><span style="color:#953800;">CollideSystem</span><span style="color:#24292F;">::</span><span style="color:#8250DF;">checkCollision</span><span style="color:#24292F;">(</span><span style="color:#953800;">PositionComponent</span><span style="color:#24292F;"> </span><span style="color:#953800;">aPos</span><span style="color:#24292F;">, </span><span style="color:#953800;">ColliderComponent</span><span style="color:#24292F;"> </span><span style="color:#953800;">aCol</span><span style="color:#24292F;">, </span><span style="color:#953800;">PositionComponent</span><span style="color:#24292F;"> </span><span style="color:#953800;">bPos</span><span style="color:#24292F;">, </span><span style="color:#953800;">ColliderComponent</span><span style="color:#24292F;"> </span><span style="color:#953800;">bCol</span><span style="color:#24292F;">) {</span></span>
<span class="line"><span style="color:#24292F;">    </span><span style="color:#CF222E;">return</span><span style="color:#24292F;"> (aPos.x </span><span style="color:#CF222E;">&lt;</span><span style="color:#24292F;"> bPos.x </span><span style="color:#CF222E;">+</span><span style="color:#24292F;"> bCol.width </span><span style="color:#CF222E;">&amp;&amp;</span><span style="color:#6E7781;">      // A \xE0 gauche de B</span></span>
<span class="line"><span style="color:#24292F;">            aPos.x </span><span style="color:#CF222E;">+</span><span style="color:#24292F;"> aCol.width </span><span style="color:#CF222E;">&gt;</span><span style="color:#24292F;"> bPos.x </span><span style="color:#CF222E;">&amp;&amp;</span><span style="color:#6E7781;">      // A \xE0 droite de B  </span></span>
<span class="line"><span style="color:#24292F;">            aPos.y </span><span style="color:#CF222E;">&lt;</span><span style="color:#24292F;"> bPos.y </span><span style="color:#CF222E;">+</span><span style="color:#24292F;"> bCol.height </span><span style="color:#CF222E;">&amp;&amp;</span><span style="color:#6E7781;">     // A au-dessus de B</span></span>
<span class="line"><span style="color:#24292F;">            aPos.y </span><span style="color:#CF222E;">+</span><span style="color:#24292F;"> aCol.height </span><span style="color:#CF222E;">&gt;</span><span style="color:#24292F;"> bPos.y);</span><span style="color:#6E7781;">      // A en-dessous de B</span></span>
<span class="line"><span style="color:#24292F;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><hr><h2 id="\u{1F50D}-algorithme-aabb-axis-aligned-bounding-box" tabindex="-1">\u{1F50D} Algorithme AABB (Axis-Aligned Bounding Box) <a class="header-anchor" href="#\u{1F50D}-algorithme-aabb-axis-aligned-bounding-box" aria-hidden="true">#</a></h2><p>V\xE9rifie si deux rectangles se chevauchent Retourne true si collision, false sinon</p><h2 id="une-petite-visualisation-de-ce-systeme" tabindex="-1">Une Petite Visualisation de ce Systeme: <a class="header-anchor" href="#une-petite-visualisation-de-ce-systeme" aria-hidden="true">#</a></h2><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki vp-code-dark"><code><span class="line"></span>
<span class="line"><span style="color:#C9D1D9;">Entit\xE9 A (projectile):     Entit\xE9 B (ennemi):</span></span>
<span class="line"><span style="color:#C9D1D9;">\u250C\u2500\u2500\u2500\u2500\u2500\u2510                   \u250C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510</span></span>
<span class="line"><span style="color:#C9D1D9;">\u2502  A  \u2502 \u2190collision\u2192       \u2502    B    \u2502</span></span>
<span class="line"><span style="color:#C9D1D9;">\u2514\u2500\u2500\u2500\u2500\u2500\u2518                   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518</span></span>
<span class="line"><span style="color:#C9D1D9;">(aPos.x, aPos.y)         (bPos.x, bPos.y)</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><pre class="shiki vp-code-light"><code><span class="line"></span>
<span class="line"><span style="color:#24292F;">Entit\xE9 A (projectile):     Entit\xE9 B (ennemi):</span></span>
<span class="line"><span style="color:#24292F;">\u250C\u2500\u2500\u2500\u2500\u2500\u2510                   \u250C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510</span></span>
<span class="line"><span style="color:#24292F;">\u2502  A  \u2502 \u2190collision\u2192       \u2502    B    \u2502</span></span>
<span class="line"><span style="color:#24292F;">\u2514\u2500\u2500\u2500\u2500\u2500\u2518                   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518</span></span>
<span class="line"><span style="color:#24292F;">(aPos.x, aPos.y)         (bPos.x, bPos.y)</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h1 id="_2-systeme-principal-de-collision" tabindex="-1">2. Syst\xE8me principal de collision <a class="header-anchor" href="#_2-systeme-principal-de-collision" aria-hidden="true">#</a></h1><h3 id="etape-1-recuperation-des-composants" tabindex="-1">\xC9tape 1 : R\xE9cup\xE9ration des composants <a class="header-anchor" href="#etape-1-recuperation-des-composants" aria-hidden="true">#</a></h3><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki vp-code-dark"><code><span class="line"><span style="color:#FF7B72;">auto&amp;</span><span style="color:#C9D1D9;"> positions </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> r.get_components</span><span style="color:#FF7B72;">&lt;</span><span style="color:#C9D1D9;">PositionComponent</span><span style="color:#FF7B72;">&gt;</span><span style="color:#C9D1D9;">();</span><span style="color:#8B949E;">  // Positions des entit\xE9s</span></span>
<span class="line"><span style="color:#FF7B72;">auto&amp;</span><span style="color:#C9D1D9;"> colliders </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> r.get_components</span><span style="color:#FF7B72;">&lt;</span><span style="color:#C9D1D9;">ColliderComponent</span><span style="color:#FF7B72;">&gt;</span><span style="color:#C9D1D9;">();</span><span style="color:#8B949E;">  // Zones de collision  </span></span>
<span class="line"><span style="color:#FF7B72;">auto&amp;</span><span style="color:#C9D1D9;"> damages   </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> r.get_components</span><span style="color:#FF7B72;">&lt;</span><span style="color:#C9D1D9;">DamageComponent</span><span style="color:#FF7B72;">&gt;</span><span style="color:#C9D1D9;">();</span><span style="color:#8B949E;">    // D\xE9g\xE2ts inflig\xE9s</span></span>
<span class="line"><span style="color:#FF7B72;">auto&amp;</span><span style="color:#C9D1D9;"> healths   </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> r.get_components</span><span style="color:#FF7B72;">&lt;</span><span style="color:#C9D1D9;">HealthComponent</span><span style="color:#FF7B72;">&gt;</span><span style="color:#C9D1D9;">();</span><span style="color:#8B949E;">    // Points de vie</span></span>
<span class="line"></span></code></pre><pre class="shiki vp-code-light"><code><span class="line"><span style="color:#CF222E;">auto&amp;</span><span style="color:#24292F;"> positions </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> r.get_components</span><span style="color:#CF222E;">&lt;</span><span style="color:#24292F;">PositionComponent</span><span style="color:#CF222E;">&gt;</span><span style="color:#24292F;">();</span><span style="color:#6E7781;">  // Positions des entit\xE9s</span></span>
<span class="line"><span style="color:#CF222E;">auto&amp;</span><span style="color:#24292F;"> colliders </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> r.get_components</span><span style="color:#CF222E;">&lt;</span><span style="color:#24292F;">ColliderComponent</span><span style="color:#CF222E;">&gt;</span><span style="color:#24292F;">();</span><span style="color:#6E7781;">  // Zones de collision  </span></span>
<span class="line"><span style="color:#CF222E;">auto&amp;</span><span style="color:#24292F;"> damages   </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> r.get_components</span><span style="color:#CF222E;">&lt;</span><span style="color:#24292F;">DamageComponent</span><span style="color:#CF222E;">&gt;</span><span style="color:#24292F;">();</span><span style="color:#6E7781;">    // D\xE9g\xE2ts inflig\xE9s</span></span>
<span class="line"><span style="color:#CF222E;">auto&amp;</span><span style="color:#24292F;"> healths   </span><span style="color:#CF222E;">=</span><span style="color:#24292F;"> r.get_components</span><span style="color:#CF222E;">&lt;</span><span style="color:#24292F;">HealthComponent</span><span style="color:#CF222E;">&gt;</span><span style="color:#24292F;">();</span><span style="color:#6E7781;">    // Points de vie</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="etape-2-creation-de-la-vue-ecs" tabindex="-1">\xC9tape 2 : Cr\xE9ation de la vue ECS <a class="header-anchor" href="#etape-2-creation-de-la-vue-ecs" aria-hidden="true">#</a></h3><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki vp-code-dark"><code><span class="line"><span style="color:#FFA657;">view</span><span style="color:#C9D1D9;">&lt;</span><span style="color:#FFA657;">PositionComponent</span><span style="color:#C9D1D9;">, </span><span style="color:#FFA657;">ColliderComponent</span><span style="color:#C9D1D9;">&gt; </span><span style="color:#D2A8FF;">entityView</span><span style="color:#C9D1D9;">(</span><span style="color:#FFA657;">r</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"></span></code></pre><pre class="shiki vp-code-light"><code><span class="line"><span style="color:#953800;">view</span><span style="color:#24292F;">&lt;</span><span style="color:#953800;">PositionComponent</span><span style="color:#24292F;">, </span><span style="color:#953800;">ColliderComponent</span><span style="color:#24292F;">&gt; </span><span style="color:#8250DF;">entityView</span><span style="color:#24292F;">(</span><span style="color:#953800;">r</span><span style="color:#24292F;">);</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br></div></div><ul><li>S\xE9lectionne seulement les entit\xE9s qui ont \xE0 la fois Position ET Collider</li><li>Optimisation : \xE9vite de tester les entit\xE9s sans collision \xC9tape 3 : Double boucle de d\xE9tection</li></ul><h3 id="etape-3-double-boucle-de-detection" tabindex="-1">\xC9tape 3 : Double boucle de d\xE9tection <a class="header-anchor" href="#etape-3-double-boucle-de-detection" aria-hidden="true">#</a></h3><div class="language-cpp line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki vp-code-dark"><code><span class="line"><span style="color:#FF7B72;">for</span><span style="color:#C9D1D9;"> (</span><span style="color:#FF7B72;">auto</span><span style="color:#C9D1D9;"> entityA : entityView) {</span><span style="color:#8B949E;">           // Entit\xE9 attaquante</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">if</span><span style="color:#C9D1D9;"> (</span><span style="color:#FF7B72;">!</span><span style="color:#C9D1D9;">damages.</span><span style="color:#D2A8FF;">has</span><span style="color:#C9D1D9;">(entityA)) </span><span style="color:#FF7B72;">continue</span><span style="color:#C9D1D9;">;</span><span style="color:#8B949E;">    // Doit pouvoir faire des d\xE9g\xE2ts</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#FF7B72;">for</span><span style="color:#C9D1D9;"> (</span><span style="color:#FF7B72;">auto</span><span style="color:#C9D1D9;"> entityB : entityView) {</span><span style="color:#8B949E;">       // Entit\xE9 cible</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#FF7B72;">if</span><span style="color:#C9D1D9;"> (entityA </span><span style="color:#FF7B72;">==</span><span style="color:#C9D1D9;"> entityB) </span><span style="color:#FF7B72;">continue</span><span style="color:#C9D1D9;">;</span><span style="color:#8B949E;">   // Pas d&#39;auto-collision</span></span>
<span class="line"><span style="color:#C9D1D9;">        </span><span style="color:#FF7B72;">if</span><span style="color:#C9D1D9;"> (</span><span style="color:#FF7B72;">!</span><span style="color:#C9D1D9;">healths.</span><span style="color:#D2A8FF;">has</span><span style="color:#C9D1D9;">(entityB)) </span><span style="color:#FF7B72;">continue</span><span style="color:#C9D1D9;">;</span><span style="color:#8B949E;"> // Doit avoir des HP</span></span>
<span class="line"></span></code></pre><pre class="shiki vp-code-light"><code><span class="line"><span style="color:#CF222E;">for</span><span style="color:#24292F;"> (</span><span style="color:#CF222E;">auto</span><span style="color:#24292F;"> entityA : entityView) {</span><span style="color:#6E7781;">           // Entit\xE9 attaquante</span></span>
<span class="line"><span style="color:#24292F;">    </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (</span><span style="color:#CF222E;">!</span><span style="color:#24292F;">damages.</span><span style="color:#8250DF;">has</span><span style="color:#24292F;">(entityA)) </span><span style="color:#CF222E;">continue</span><span style="color:#24292F;">;</span><span style="color:#6E7781;">    // Doit pouvoir faire des d\xE9g\xE2ts</span></span>
<span class="line"><span style="color:#24292F;">    </span></span>
<span class="line"><span style="color:#24292F;">    </span><span style="color:#CF222E;">for</span><span style="color:#24292F;"> (</span><span style="color:#CF222E;">auto</span><span style="color:#24292F;"> entityB : entityView) {</span><span style="color:#6E7781;">       // Entit\xE9 cible</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (entityA </span><span style="color:#CF222E;">==</span><span style="color:#24292F;"> entityB) </span><span style="color:#CF222E;">continue</span><span style="color:#24292F;">;</span><span style="color:#6E7781;">   // Pas d&#39;auto-collision</span></span>
<span class="line"><span style="color:#24292F;">        </span><span style="color:#CF222E;">if</span><span style="color:#24292F;"> (</span><span style="color:#CF222E;">!</span><span style="color:#24292F;">healths.</span><span style="color:#8250DF;">has</span><span style="color:#24292F;">(entityB)) </span><span style="color:#CF222E;">continue</span><span style="color:#24292F;">;</span><span style="color:#6E7781;"> // Doit avoir des HP</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="logique" tabindex="-1">Logique : <a class="header-anchor" href="#logique" aria-hidden="true">#</a></h3><ul><li>entityA = Projectile/Attaquant (a des d\xE9g\xE2ts)</li><li>entityB = Cible/D\xE9fenseur (a des points de vie)</li><li>Projectile touche ennemi</li><li>Ennemi perd des HP</li><li>Si HP \u2264 0 \u2192 ennemi marqu\xE9 pour destruction</li><li>Projectile marqu\xE9 pour destruction (consomm\xE9)</li></ul><h2 id="ce-systeme-permet-de" tabindex="-1">Ce systeme permet de : <a class="header-anchor" href="#ce-systeme-permet-de" aria-hidden="true">#</a></h2><ul><li>Charger le syst\xE8me dynamiquement avec dlopen()</li><li>Utiliser depuis n&#39;importe quel langage (C, Python, etc.)</li><li>Modulaire : peut \xEAtre activ\xE9/d\xE9sactiv\xE9</li></ul>`,24),p=[o];function t(c,r,i,y,d,F){return a(),n("div",null,p)}const m=s(l,[["render",t]]);export{C as __pageData,m as default};
